#!/bin/sh
################################################################################
### BATOCERA.PLUS
### Alexandre Freire dos Santos
### alexxandre.freire@gmail.com
################################################################################

### CAMINHOS

SHARE='/userdata'

BIOS_DIR="${SHARE}/bios"
SAVES_DIR="${SHARE}/saves"
ROMS_DIR="${SHARE}/roms"
EXTRACTIONS_DIR="${SHARE}/extractions"

BATOCERA_CONF="${HOME}/batocera.conf"
RETROARCH_CONF="${HOME}/configs/retroarch/retroarchcustom.cfg"

################################################################################

### ATIVA A TELA DE CARREGAMENTO

if [ -z "${LOADSCREEN}" ]; then
    LOADSCREEN=1
fi

mouse-pointer off

################################################################################

### CAPTURA DE PARAMETROS.

P1INDEX=''; P1GUID=''; P1NAME=''  ; P1NBBUTTONS=''; P1NBHATS=''; P1NBAXES=''; P1DEVICEPATH=''
P2INDEX=''; P2GUID=''; P2NAME=''  ; P2NBBUTTONS=''; P2NBHATS=''; P2NBAXES=''; P2DEVICEPATH=''
P3INDEX=''; P3GUID=''; P3NAME=''  ; P3NBBUTTONS=''; P3NBHATS=''; P3NBAXES=''; P3DEVICEPATH=''
P4INDEX=''; P4GUID=''; P4NAME=''  ; P4NBBUTTONS=''; P4NBHATS=''; P4NBAXES=''; P4DEVICEPATH=''
P5INDEX=''; P5GUID=''; P5NAME=''  ; P5NBBUTTONS=''; P5NBHATS=''; P5NBAXES=''; P5DEVICEPATH=''
P1INDEX=''; P6GUID=''; P6NAME=''  ; P6NBBUTTONS=''; P6NBHATS=''; P6NBAXES=''; P6DEVICEPATH=''
P2INDEX=''; P7GUID=''; P7NAME=''  ; P7NBBUTTONS=''; P7NBHATS=''; P7NBAXES=''; P7DEVICEPATH=''
P3INDEX=''; P8GUID=''; P8NAME=''  ; P8NBBUTTONS=''; P8NBHATS=''; P8NBAXES=''; P8DEVICEPATH=''
SYSTEM='' ; ROM=''   ; EMULATOR=''; CORE=''

FOUND=''

for i in "$@"; do
    if [ "$FOUND" == '' ]; then
        case "$i" in
            -p1index|-p1guid|-p1name|-p1nbbuttons|-p1nbhats|-p1nbaxes|-p1devicepath| \
            -p2index|-p2guid|-p2name|-p2nbbuttons|-p2nbhats|-p2nbaxes|-p2devicepath| \
            -p3index|-p3guid|-p3name|-p3nbbuttons|-p3nbhats|-p3nbaxes|-p3devicepath| \
            -p4index|-p4guid|-p4name|-p4nbbuttons|-p4nbhats|-p4nbaxes|-p4devicepath| \
            -p5index|-p5guid|-p5name|-p5nbbuttons|-p5nbhats|-p5nbaxes|-p5devicepath| \
            -p3index|-p6guid|-p6name|-p6nbbuttons|-p6nbhats|-p6nbaxes|-p6devicepath| \
            -p4index|-p7guid|-p7name|-p7nbbuttons|-p7nbhats|-p7nbaxes|-p7devicepath| \
            -p5index|-p8guid|-p8name|-p8nbbuttons|-p8nbhats|-p8nbaxes|-p8devicepath| \
            -system |-rom)
                FOUND="$i"
            ;;
        esac
    else
        case "$FOUND" in
        -p1index)      P1INDEX="$i"      ;;
        -p1guid)       P1GUID="$i"       ;;
        -p1name)       P1NAME="$i"       ;;
        -p1nbbuttons)  P1NBBUTTONS="$i"  ;;
        -p1nbhats)     P1NBHATS="$i"     ;;
        -p1nbaxes)     P1NBAXES="$i"     ;;
        -p1devicepath) P1DEVICEPATH="$i" ;;

        -p2index)      P2INDEX="$i"      ;;
        -p2guid)       P2GUID="$i"       ;;
        -p2name)       P2NAME="$i"       ;;
        -p2nbbuttons)  P2NBBUTTONS="$i"  ;;
        -p2nbhats)     P2NBHATS="$i"     ;;
        -p2nbaxes)     P2NBAXES="$i"     ;;
        -p2devicepath) P2DEVICEPATH="$i" ;;

        -p3index)      P3INDEX="$i"      ;;
        -p3guid)       P3GUID="$i"       ;;
        -p3name)       P3NAME="$i"       ;;
        -p3nbbuttons)  P3NBBUTTONS="$i"  ;;
        -p3nbhats)     P3NBHATS="$i"     ;;
        -p3nbaxes)     P3NBAXES="$i"     ;;
        -p3devicepath) P3DEVICEPATH="$i" ;;

        -p4index)      P4INDEX="$i"      ;;
        -p4guid)       P4GUID="$i"       ;;
        -p4name)       P4NAME="$i"       ;;
        -p4nbbuttons)  P4NBBUTTONS="$i"  ;;
        -p4nbhats)     P4NBHATS="$i"     ;;
        -p4nbaxes)     P4NBAXES="$i"     ;;
        -p4devicepath) P4DEVICEPATH="$i" ;;

        -p5index)      P5INDEX="$i"      ;;
        -p5guid)       P5GUID="$i"       ;;
        -p5name)       P5NAME="$i"       ;;
        -p5nbbuttons)  P5NBBUTTONS="$i"  ;;
        -p5nbhats)     P5NBHATS="$i"     ;;
        -p5nbaxes)     P5NBAXES="$i"     ;;
        -p5devicepath) P5DEVICEPATH="$i" ;;

        -p6index)      P6INDEX="$i"      ;;
        -p6guid)       P6GUID="$i"       ;;
        -p6name)       P6NAME="$i"       ;;
        -p6nbbuttons)  P6NBBUTTONS="$i"  ;;
        -p6nbhats)     P6NBHATS="$i"     ;;
        -p6nbaxes)     P6NBAXES="$i"     ;;
        -p6devicepath) P6DEVICEPATH="$i" ;;

        -p7index)      P7INDEX="$i"      ;;
        -p7guid)       P7GUID="$i"       ;;
        -p7name)       P7NAME="$i"       ;;
        -p7nbbuttons)  P7NBBUTTONS="$i"  ;;
        -p7nbhats)     P7NBHATS="$i"     ;;
        -p7nbaxes)     P7NBAXES="$i"     ;;
        -p7devicepath) P7DEVICEPATH="$i" ;;

        -p8index)      P8INDEX="$i"      ;;
        -p8guid)       P8GUID="$i"       ;;
        -p8name)       P8NAME="$i"       ;;
        -p8nbbuttons)  P8NBBUTTONS="$i"  ;;
        -p8nbhats)     P8NBHATS="$i"     ;;
        -p8nbaxes)     P8NBAXES="$i"     ;;
        -p8devicepath) P8DEVICEPATH="$i" ;;

        -system)       SYSTEM="$i"       ;;
        -rom)          ROM="$i"          ;;
        esac

        FOUND=''
    fi
done

################################################################################

### DEFAULT EMULATOR and CORE

# Antigamente o emulationstaion enviava a variavel CORE e o SYSTEM quando o jogo
# era executado, mas nas versões novas ele não faz mais isso, ele salva estas
# informações no arquivo batocera.conf e o configgen busca por estas informações
# neste arquivo.
# Este trexo de código faz a leitura do arquivo batocera.conf e caso encontre
# informações referentes ao CORE e o SYSTEM ele adiciona nestas variáveis para
# serem usadas neste script, caso não exista estas informações ele define estas
# variáveis como "auto".
#sed -i "s#^$(basename "${ROM}")#$(basename "${SYSTEM}").$(basename "${ROM}")#g" "$BATOCERA_CONF"

EMULATOR="$(grep -F "[\"$(basename "${ROM}")\"].emulator" "$BATOCERA_CONF" | cut -d '=' -f 2)"
if [ ! "$EMULATOR" ] || [ "$EMULATOR" == 'auto' ]; then
    EMULATOR="$(grep -F "${SYSTEM}.emulator" "$BATOCERA_CONF" | cut -d '=' -f 2)"
    if [ ! "$EMULATOR" ]; then
        EMULATOR='auto'
    fi
fi

CORE="$(grep -F "[\"$(basename "${ROM}")\"].core" "$BATOCERA_CONF" | cut -d '=' -f 2)"
if [ ! "$CORE" ] || [ "$CORE" == 'auto' ]; then
    CORE="$(grep -F "${SYSTEM}.core" "$BATOCERA_CONF" | cut -d '=' -f 2)"
    if ! [ "$CORE" ]; then
        CORE='auto'
    fi
fi

################################################################################

### LER OPÇÕES DE JOGO CONFIGURADAS PELO USUÁRIO NO ES.

OPTION=''

function getOption() {
    local SEARCH="${1}"

    OPTION='auto'
    OPTION="$(grep -F "${SYSTEM}[\"$(basename "${ROM}")\"].${SEARCH}=" "${BATOCERA_CONF}" | cut -d '=' -f 2)"
    if [ ! "${OPTION}" == '' ] && [ ! "${OPTION}" == 'auto' ]; then
        return 0
    fi

    OPTION='auto'
    OPTION="$(grep "^${SYSTEM}.${SEARCH}=" "${BATOCERA_CONF}" | cut -d '=' -f 2)"
    if [ ! "${OPTION}" == '' ] && [ ! "${OPTION}" == 'auto' ]; then
        return 0
    fi

    OPTION='auto'
    OPTION="$(grep "^global.${SEARCH}=" "${BATOCERA_CONF}" | cut -d '=' -f 2)"
    if [ ! "${OPTION}" == '' ] && [ ! "${OPTION}" == 'auto' ]; then
        return 0
    fi

    OPTION='auto'
}

#Exemplo
#getOption arch
#echo "${OPTION}" > /userdata/teste.txt

################################################################################

### LOAD SCREEN START

if [ "${LOADSCREEN}" == '1' ]; then

    # Define o nome do tema.
    if [ -f "$SHARE/system/configs/emulationstation/es_settings.cfg" ]; then
        THEME_NAME="$(cat "$SHARE/system/configs/emulationstation/es_settings.cfg" | grep '<string name="ThemeSet" value=' | cut -d '"' -f 4)"
        if ! [ "$THEME_NAME" ]; then
            THEME_NAME='batocera-plus'
        fi
    else
        THEME_NAME='batocera-plus'
    fi

    # Define diretorio do tema.
    if [ -d "$SHARE/themes/$THEME_NAME" ]; then
        THEME_DIR="$SHARE/themes/$THEME_NAME"
    elif [ -d "/etc/emulationstation/themes/$THEME_NAME" ]; then
        THEME_DIR="/etc/emulationstation/themes/$THEME_NAME"
    else
        THEME_DIR="/etc/emulationstation/themes/batocera-plus"
    fi

    # Define o nome da imagem de carregamento.
    if [ -f "$THEME_DIR/loadscreen/$SYSTEM.png" ]; then
        IMG_NAME="$THEME_DIR/loadscreen/$SYSTEM.png"
    elif [ -f "$THEME_DIR/loadscreen/$SYSTEM.jpg" ]; then
        IMG_NAME="$THEME_DIR/loadscreen/$SYSTEM.jpg"
    elif [ -f '/etc/emulationstation/themes/batocera-plus/loadscreen/loadscreen.png' ]; then
        IMG_NAME='/etc/emulationstation/themes/batocera-plus/loadscreen/loadscreen.png'
    elif [ -f '/etc/emulationstation/themes/batocera-plus/loadscreen/loadscreen.jpg' ]; then
        IMG_NAME='/etc/emulationstation/themes/batocera-plus/loadscreen/loadscreen.jpg'
    fi

    # Exibe a tela de carregamento.
    batocera-load-screen -t 10 -i "${IMG_NAME}" &
    START_TIME="$(date +%s)"
fi

################################################################################

### CONFIGURA A ROM PARA SER EXECUTADA POR ARQUIVO DE TEXTO.
### Útil para usar as roms de um sistema em outro sem duplicar arquivos.

if [ -f "${ROM}" ]; then
    if [ "$(ls -l "${ROM}" | awk '{print $5}')" -lt 33 ]; then
        ROM_TXT="$(head -n 1 "${ROM}")"
        if [ "$(echo "${ROM_TXT}" | grep '^#')" ]; then
            ROM_NAME="$(basename "${ROM}")"
            ROM_DIR="$(dirname "${ROM}")"
            ROM_SYS="$(echo "${ROM_TXT}" | grep '^#' | cut -d '#' -f 2-)"
            ROM_NEW="$(dirname "${ROM_DIR}")"
            ROM="${ROM_NEW}/${ROM_SYS}/${ROM_NAME}"
        fi
    fi
fi

################################################################################

### DESCOMPACTA ROM NO FORMATO DO 7ZIP

function un7zip() {

    ### Pega o nome da rom sem a extenção.
    ### Somente executa o script para arquivos compactados pelo 7zip.
    ROM_DIR="$(dirname  "$ROM")"
    if [ -f "$ROM_DIR/$(basename "$ROM" 7z)7z" ]; then
        local ROM_FILE="$(basename "$ROM" .7z)"
        local ROM_EXT='7z'
    elif [ -f "$ROMDIR/$(basename "$ROM" 7Z)7Z" ]; then
        local ROM_FILE="$(basename "$ROM" .7Z)"
        local ROM_EXT='7Z'
    else
        return 0
    fi

    ### Procura por arquivo principal da rom (.cue .ccd .lst etc...)
    ### no diretório de roms descompactadas.
    for ((i = 0; i != 2; i++)); do
        for j in $1; do
            if [ -d "$EXTRACTIONS_DIR/$ROM_FILE" ]; then
                if [ -f "$EXTRACTIONS_DIR/$ROM_FILE/$ROM_FILE$j" ]; then
                    # Quando um core alternativo é escolhido para uma rom no formato 7z
                    # o emulationstation salva no arquivo batocera.conf o nome da rom com a exteção 7z ou 7Z
                    # como a rom vai ser descompactada é preciso mudar a exteção da rom no arquivo batocera.conf
                    # para o formato descompactado (cue, ccd, iso, etc...)
                    # Dependendo do nome da rom ela pode ter caracteres especiais, a finalidade deste código é
                    # usar caracteres de escape para permitir que ela seja usada no comando sed.
                    for i in "$(grep -F "$(basename "$ROM")" "$BATOCERA_CONF" | sed "s/.$ROM_EXT./$j\"/")"; do
                        local ROM_NAME_ESC=$(sed 's/[^^]/[&]/g; s/\^/\\^/g' <<< "${ROM_FILE}$j")
                        sed -i "/$ROM_NAME_ESC/d" "$BATOCERA_CONF"
                        echo "$i" >> "$BATOCERA_CONF"
                    done
                    ROM="$EXTRACTIONS_DIR/$ROM_FILE/$ROM_FILE$j"
                    return 0
                fi
            elif [ -f "$EXTRACTIONS_DIR/$ROM_FILE$j" ]; then
                    for i in "$(grep -F "$(basename "$ROM")" "$BATOCERA_CONF" | sed "s/.$ROM_EXT./$j\"/")"; do
                        local ROM_NAME_ESC=$(sed 's/[^^]/[&]/g; s/\^/\\^/g' <<< "${ROM_FILE}$j")
                        sed -i "/$ROM_NAME_ESC/d" "$BATOCERA_CONF"
                        echo "$i" >> "$BATOCERA_CONF"
                    done
                ROM="$EXTRACTIONS_DIR/$ROM_FILE$j"
                return 0
            fi
        done

        ### Evita que a ISO seja descompactada duas vezes.
        ### Isso acontece quando a rom está em um formato não aceito.
        if (( $i > 0 )); then
            return 1
        fi

        ### Limpa a pasta temporária de descompactação.
        if [ "$(ls $EXTRACTIONS_DIR)" ]; then
            rm -r "$EXTRACTIONS_DIR/"*
        fi

        ### Descompacta a rom.
        7zr x "$ROM" "-o$EXTRACTIONS_DIR" -bb0
    done
}

case $SYSTEM in
    3do)        un7zip '.cue .CUE .iso .ISO .bin .BIN .chd .CHD' ;;
    psx)        un7zip '.ccd .CCD .cue .CUE .mdf .MDF .chd .CHD .cbn .CBN .m3u .M3U .pbp .PBP .toc .TOC .iso .ISO .bin .BIN .img .IMG' ;;
    psxmini)    un7zip '.ccd .CCD .cue .CUE .mdf .MDF .chd .CHD .cbn .CBN .m3u .M3U .pbp .PBP .toc .TOC .iso .ISO .bin .BIN .img .IMG' ;;
    psp)        un7zip '.iso .ISO .cso .CSO .pbp .PBP' ;;
    pspminis)   un7zip '.iso .ISO .cso .CSO .pbp .PBP' ;;
    ps2)        un7zip '.mdf .MDF .iso .ISO .nrg .NRG .bin .BIN .img .IMG .dump .DUMP .cso .CSO .gz .GZ' ;;
    gamecube)   un7zip '.ciso .CISO .iso .ISO .gc .GC .gcz .GCZ .wbfs .WBFS .gcm .GCM' ;;
    wii)        un7zip '.iso .ISO .wbfs .WBFS .dol .DOL .gcm .GCM .ciso .CISO .gcz .GCZ .wad .WAD' ;;
    3ds)        un7zip '.3ds .3DS .3dsx .3DSX .elf .ELF .axf .AXF .cci .CCI .cxi .CXI .app .APP' ;;
    segacd)     un7zip '.cue .CUE .chd .CHD .iso .ISO' ;;
    saturn)     un7zip '.ccd .CCD .cue .CUE .chd .CHD .iso .ISO .bin .BIN' ;;
    dreamcast)  un7zip '.cdi .CDI .gdi .GDI .chd .CHD' ;;
    naomi)      un7zip '.lst .LST .bin .BIN .dat .DAT' ;;
    neogeocd)   un7zip '.cue .CUE .chd .CHD .iso .ISO' ;;
    atomiswave) un7zip '.lst .LST .bin .BIN .dat .DAT' ;;
    naomi)      un7zip '.lst .LST .bin .BIN .dat .DAT' ;;
    arcade)     un7zip '.lst .LST .bin .BIN .dat .DAT .fba .FBA' ;;
    snescd)     un7zip '.smc .SMC .sfc .SFC' ;;
    n64)        un7zip '.z64 .Z64 .n64 .N64 .v64 .V64' ;;
    n64dd)      un7zip '.z64 .Z64 .n64 .N64 .v64 .V64 .ndd .NDD' ;;
    amigacd32)  un7zip '.cue .CUE .lha .LHA .iso .ISO ' ;;
    pcenginecd) un7zip '.cue .CUE .ccd .CCD .iso .ISO .bin .BIN .img .IMG' ;;
    jaguar)     un7zip '.ccd .CCD .cue .CUE .iso .ISO .bin .BIN' ;;
    amigacdtv)  un7zip '.cue .CUE .iso .ISO .bin .BIN' ;;
esac

################################################################################

### EXECUTA A ROM DENTRO DE UMA PASTA

function runInFolder {

    # Ignora sistemas que utilizam roms dentro de pastas nativamente como por
    # exemplo  msdos windows e linux 
    case "$SYSTEM" in
        dos|windows|linux|daphne) return 0 ;;
    esac

    # Verifica se o nome do arquivo principal da rom (.cue .iso) tem o mesmo
    # nome e extensão da pasta com a rom, se tiver configura para executar a
    # rom sem tentar adivinhar a sua extensão.
    ROM_NAME="$(basename "$ROM")"
    if [ -f "$ROM/$ROM_NAME" ]; then
        ROM="$ROM/$ROM_NAME"
        return 0
    fi

    # Tenta adivinhar a extensão do arquivo principal da rom.
    ROM_EXTENSION='.ccd .CCD .cue .CUE .lst .LST .toc .TOC .sfc .SFC .smc .SMC .chd .CHD .ciso .CISO .cso .CSO .wbfs .WBFS .cdi .CDI .gc .GC .pbp .PBP .dump .DUMP .gcm .GCM .wad .WAD .gcz .GCZ .gdi .GDI .2hd .2HD .32x .32X .3ds .3DS .3dsx .3DSX .88d .88D .a26 .A26 .a52 .A52 .a78 .A78 .adf .ADF .adz .ADZ .app .APP .atr .ATR .atx .ATX .axf .AXF .bs .BS .cas .CAS .cbn .CBN .cci .CCI .cdm .CDM .cdt .CDT .cmd .CMD .col .COL .cpc .CPC .crt .CRT .ctr .CTR .cxi .CXI .d64 .D64 .d71 .D71 .d80 .D80 .d81 .D81 .d82 .D82 .d88 .D88 .dim .DIM .dms .DMS .do .DO .dol .DOL .dsk .DSK .dup .DUP .elf .ELF .exe .EXE .fba .FBA .fds .FDS .fig .FIG .g41 .G41 .g64 .G64 .gam .GAM .gb .GB .gba .GBA .gbc .GBC .gen .GEN .gg .GG .hdf .HDF .hdm .HDM .int .INT .ipf .IPF .itv .ITV .iwad .IWAD .j64 .J64 .jag .JAG .lha .LHA .lnx .LNX .lua .LUA .lutro .LUTRO .m3u .M3U .md .MD .mgd .MGD .mgt .MGT .mgw .MGW .moonlight .MOONLIGHT .mx1 .MX1 .mx2 .MX2 .n64 .N64 .nds .NDS .nes .NES .ngc .NGC .ngp .NGP .nib .NIB .p .P .p00 .P00 .pak .PAK .pce .PCE .po .PO .prg .PRG .prx .PRX .raw .RAW .residualvm .RESIDUALVM .rom .ROM .rzx .RZX .scl .SCL .scummvm .SCUMMVM .sg .SG .sgx .SGX .smd .SMD .sms .SMS .sna .SNA .st .ST .stx .STX .svm .SVM .swc .SWC .swf .SWF .szx .SZX .t64 .T64 .tap .TAP .trd .TRD .tzx .TZX .uae .UAE .udi .UDI .v64 .V64 .vb .VB .vec .VEC .ws .WS .wsc .WSC .x64 .X64 .xdf .XDF .xex .XEX .xfd .XFD .z .Z .z64 .Z64 .z80 .Z80 .znx .ZNX .nrg .NRG .mdf .MDF .iso .ISO .dat .DAT .bin .BIN .img .IMG .zip .ZIP .gz .GZ .7z .7Z'
    for i in $ROM_EXTENSION; do
        if [ -f "$ROM/${ROM_NAME%.*}$i" ]; then
            ROM="$ROM/${ROM_NAME%.*}$i"
            return 0
        fi
    done
    return 1
}

# Somente executa esta função se a rom estiver dentro de uma pasta.
if [ -d "$ROM" ]; then
    runInFolder
fi

################################################################################

### ATIVA O GLCORE PARA ALGUNS CORES

VIDEO_DRIVER='gl'

if [ "${EMULATOR}" == 'libretro' ]; then
    case ${CORE} in kronos|dolphin|ishiiruka)
        VIDEO_DRIVER=glcore
    esac
fi

if grep -q "^video_driver = \"${VIDEO_DRIVER}\"$" "${RETROARCH_CONF}"; then
    sed -i "s/^video_driver = .*/video_driver = \"${VIDEO_DRIVER}\"/" "${RETROARCH_CONF}"
else
    echo -ne "\nvideo_driver = \"${VIDEO_DRIVER}\"" >> "${RETROARCH_CONF}"
fi

unset VIDEO_DRIVER

################################################################################

### LOAD SCREEN STOP

if [ "${LOADSCREEN}" == '1' ] && [ "$START_TIME" == "$(date +%s)" ]; then
    sleep 3
fi

################################################################################

### RAINE (EMULADOR DE NEOGEO CD)

if [ "$SYSTEM" == 'neogeocd' ]; then
    if [ "${EMULATOR}" == 'raine' ] || [ "${EMULATOR}" == 'auto' ]; then
        exec /opt/Raine/Raine.sh "${ROM}"                                         \
                                 "${CORE}"                                        \
                                  $(test -z "${P1INDEX}" || echo -n "${P1INDEX}") \
                                  $(test -z "${P1GUID}"  || echo -n "${P1GUID}" ) \
                                  $(test -z "${P2INDEX}" || echo -n "${P2INDEX}") \
                                  $(test -z "${P2GUID}"  || echo -n "${P2GUID}" )
    fi
fi

################################################################################

### ARCADE

if [ "$SYSTEM" == 'arcade' ]; then
    case $CORE in
        mame)        SYSTEM='mame'   ;;
        mame0200)    SYSTEM='mame'   ;;
        mame0139)    SYSTEM='mame'   ;;
        mame078plus) SYSTEM='mame'   ;;
        hbmame)      SYSTEM='hbmame' ;;
        fbneo)       SYSTEM='fbneo'  ;;
        fbalpha2012) SYSTEM='fbneo'  ;;
        flycast)     SYSTEM='naomi'  ;;
        flycast2019) SYSTEM='naomi'  ;;
        *)           SYSTEM='mame'   ;;
    esac
fi

################################################################################

### NINTENDO 64 DISK DRIVE (N64DD)

if [ "${SYSTEM}" == 'n64dd' ] || [ "${SYSTEM}" == 'n64' ]; then
    SLEEP='0'
    TIME='0.5'

    RETROARCH_CORE_CFG="${SHARE}/system/configs/retroarch/cores/retroarch-core-options.cfg"

    if ! [ -f "${RETROARCH_CORE_CFG}" ]; then
        mkdir -p "$(dirname "${RETROARCH_CORE_CFG}")"
        echo 'parallel-n64-gfxplugin = "auto"'          > "${RETROARCH_CORE_CFG}"
        echo 'parallel-n64-64dd-hardware = "disabled"' >> "${RETROARCH_CORE_CFG}"
        SLEEP="${TIME}"
    else
        if ! [ "$(grep '^parallel-n64-gfxplugin = ' "${RETROARCH_CORE_CFG}")" ]; then
            echo 'parallel-n64-gfxplugin = "auto"' >> "${RETROARCH_CORE_CFG}"
            SLEEP="${TIME}"
        fi

        if ! [ "$(grep '^parallel-n64-64dd-hardware = ' "${RETROARCH_CORE_CFG}")" ]; then
            echo 'parallel-n64-64dd-hardware = "disabled"' >> "${RETROARCH_CORE_CFG}"
            SLEEP="${TIME}"
        fi
    fi

    if [ "${SYSTEM}" == 'n64dd' ]; then
        if [ "${CORE}" == 'parallel' ] || [ "${CORE}" == 'auto' ]; then
            GFXPLUGIN="$(grep '^parallel-n64-gfxplugin = ' "${RETROARCH_CORE_CFG}" | cut -d '=' -f 2)"

            sed -i 's#parallel-n64-gfxplugin = .*#parallel-n64-gfxplugin = \"rice\"#' "${RETROARCH_CORE_CFG}"
            sed -i 's#parallel-n64-64dd-hardware = .*#parallel-n64-64dd-hardware = \"enabled\"#' "${RETROARCH_CORE_CFG}"

            SLEEP="${TIME}"

            sleep "$(echo "${SLEEP} + 1.0" | bc)" && sed -i "s#parallel-n64-gfxplugin = .*#parallel-n64-gfxplugin = ${GFXPLUGIN}#" "${RETROARCH_CORE_CFG}" &
            sleep "$(echo "${SLEEP} + 1.2" | bc)" && sed -i 's#parallel-n64-64dd-hardware = .*#parallel-n64-64dd-hardware = \"disabled\"#' "${RETROARCH_CORE_CFG}" &
        fi
    elif [ "${CORE}" == 'parallel' ]; then
        if [ "$(grep '^parallel-n64-64dd-hardware = \"enabled\"#' "${RETROARCH_CORE_CFG}")" ]; then 
            sed -i 's#parallel-n64-gfxplugin = .*#parallel-n64-gfxplugin = \"auto\"#' "${RETROARCH_CORE_CFG}"
            sed -i 's#parallel-n64-64dd-hardware = .*#parallel-n64-64dd-hardware = \"disabled\"#' "${RETROARCH_CORE_CFG}"
            SLEEP='1'
        fi
    fi

    if ! [ "${SLEEP}" == '0' ]; then
        sleep "${SLEEP}"
    fi
fi

################################################################################

### NINTENDO 64

# Descompacta a rom no formato .zip para o emulador mupen64plus.
# Este emulador só executa roms descompactadas.

if [ "$SYSTEM" == 'n64' ]; then
    if [ "$EMULATOR" == 'mupen64plus' ] || [ "$EMULATOR" == 'auto' ]; then

        ROM_NAME_FULL="$(basename "$ROM")"

        ROM_NAME="${ROM_NAME_FULL%.zip}"
        ROM_NAME="${ROM_NAME%.ZIP}"

        if [ "${ROM_NAME_FULL}" == "${ROM_NAME}.zip" ] || [ "$ROM_NAME_FULL" == "${ROM_NAME}.ZIP" ]; then

            ROM_DESCOMPACTADA='FALSE'

            while : ; do
                for j in .z64 .Z64 .n64 .N64 .v64 .V64; do
                    if [ -f "${EXTRACTIONS_DIR}/${ROM_NAME}${j}" ]; then
                        ROM="${EXTRACTIONS_DIR}/${ROM_NAME}${j}"
                        ROM_DESCOMPACTADA='TRUE'
                        break
                    fi
                done

                if [ "${ROM_DESCOMPACTADA}" == 'FALSE' ]; then
                    rm -r -f "${EXTRACTIONS_DIR}/"* 2> /dev/null
                    unzip "${ROM}" -d "${EXTRACTIONS_DIR}"
                else
                    break
                fi
            done

        fi
    fi
fi

################################################################################

### GAMECUBE E WII (DOLPHIN-EMU)

if [ "$SYSTEM" == 'gamecube' ] || [ "$SYSTEM" == 'wii' ]; then
    if [ "${EMULATOR}" == 'libretro' ]; then

        # ATIVA POR PADRÃO A EMULAÇÃO DE CONTROLE DO WII (DEITADO) NO DOLPHIN

        if [ "${SYSTEM}" == 'wii' ]; then
            WII_RMP_DIR="${SHARE}/system/.config/retroarch/config/remaps"

            if [ ! -f "${WII_RMP_DIR}/dolphin-emu/wii.rmp" ]; then
                mkdir -p "${WII_RMP_DIR}/dolphin-emu"
                for i in {1..4}; do
                    echo -e "input_libretro_device_p${i} = \"513\"\n"\
                            "input_player${i}_btn_up = \"7\"\n"\
                            "input_player${i}_btn_down = \"6\"\n"\
                            "input_player${i}_btn_left = \"4\"\n"\
                            "input_player${i}_btn_right = \"5\"\n"\
                            "input_player${i}_btn_b = \"1\"\n"\
                            "input_player${i}_btn_x = \"0\"\n"\
                            "input_player${i}_btn_y = \"9\"" >>"${WII_RMP_DIR}/dolphin-emu/wii.rmp"
                done
            fi

            # ATIVA POR PADRÃO A EMULAÇÃO DE CONTROLE DO WII (DEITADO) NO ISHIIRUKA

            if [ ! -f "${WII_RMP_DIR}/Ishiiruka/Ishiiruka.rmp" ]; then
                mkdir -p "${WII_RMP_DIR}/Ishiiruka"
                for i in {1..4}; do
                    echo -e "input_libretro_device_p${i} = \"513\"\n"\
                            "input_player${i}_btn_b = \"1\"\n"\
                            "input_player${i}_btn_x = \"0\"\n"\
                            "input_player${i}_btn_y = \"9\"" >>"${WII_RMP_DIR}/Ishiiruka/Ishiiruka.rmp"
                done
            fi
        fi

        # O core libretro do dolphin tem um bug que ao ser iniciado pela primeira vez
        # trava o PC, esta correção corrige este bug.
        # Remova este bloco de código quando o bug for corrido nos cores libretro.
        if [ "${SYSTEM}" == 'gamecube' ]; then
            if ! [ -f  "${SAVES_DIR}/gamecube/User/Config/Dolphin.ini" ]; then
                mkdir -p "${SAVES_DIR}/gamecube/User/Config"
                echo -e "[Analytics]\nID = 0\n" > "${SAVES_DIR}/gamecube/User/Config/Dolphin.ini"
            fi
        elif [ "${SYSTEM}" == 'wii' ]; then
            if ! [ -f  "${SAVES_DIR}/wii/User/Config/Dolphin.ini" ]; then
                mkdir -p "${SAVES_DIR}/wii/User/Config"
                echo -e "[Analytics]\nID = 0\n" > "${SAVES_DIR}/wii/User/Config/Dolphin.ini"
            fi
        fi
    else
        mouse-pointer on

        getOption fullboot
	FULLBOOT="${OPTION}"

        # VEJA O SCRIPT /usr/bin/dolphin-emu.sh
	export FULLBOOT
        export SYSTEM
        export ROM
        export BATOCERA_CONF
        export DOLPHIN_CFG="${SHARE}/system/configs/dolphin-emu/Dolphin.ini"
        export DOLPHIN_CFG_DIR="$(dirname "${DOLPHIN_CFG}")"

        if [ "${CORE}" == 'dolphin-user-config' ] || [ "${ROM}" == 'batocera.plus' ]; then
            export XDG_CONFIG_HOME="${DOLPHIN_CFG_DIR}"
        else
            export XDG_CONFIG_HOME="$(dirname "${DOLPHIN_CFG_DIR}")"
        fi
    fi
fi

################################################################################

### NINTENDO WIIU EXPERIMENTAL

if [ "$SYSTEM" == 'wiiu' ]; then
	
	getOption optimizations
	OPTIMIZATIONS="${OPTION}"
	
	getOption render
	RENDER="${OPTION}"
	
	getOption sync
	SYNC="${OPTION}"
	
	getOption directx
	DXVK="${OPTION}"
	
	getOption showfps
	SHOWFPS="${OPTION}"
	
	getOption mouse_pointer
	MOUSE="${OPTION}"
	
	exec /opt/Cemu/Cemu.sh "${ROM}" "${OPTIMIZATIONS}" "${RENDER}" "${SYNC}" "${DXVK}" "${SHOWFPS}" "${MOUSE}" "${P1GUID}"

fi

################################################################################

### SEGA MODEL2 EXPERIMENTAL

if [ "$SYSTEM" == 'model2' ]; then
		
	getOption videomode
	RESOLUTION="${OPTION}"
		
	getOption ratio
	WIDESCREEN="${OPTION}"
		
	getOption antialiasing
	ANTIALIASING="${OPTION}"
	
	getOption anisotropicfilter
	ANISOTROPICFILTER="${OPTION}"
	
	getOption vsync
	VSYNC="${OPTION}"
	
	getOption drawcross
	DRAWCROSS="${OPTION}"
	
	getOption rumble
	RUMBLE="${OPTION}"
		
	# Executa o Model 2
    exec /opt/Model2/Model2.sh "${ROM}" "${CORE}" "${RESOLUTION}" "${WIDESCREEN}" "${ANTIALIASING}" "${VSYNC}" "${ANISOTROPICFILTER}" "${DRAWCROSS}" "${RUMBLE}" "${P1GUID}"

fi

################################################################################

### SEGA MODEL 3 EXPERIMENTAL

if [ "$SYSTEM" == 'model3' ]; then

	getOption videomode
	RESOLUTION="${OPTION}"
		
	getOption ratio
	WIDESCREEN="${OPTION}"
	
	getOption multitexture
	MULTITEXTURE="${OPTION}"
	
	getOption multithread
	MULTITHREAD="${OPTION}"
	
	getOption quadrendering
	QUADRENDERING="${OPTION}"
	
	getOption vsync
	VSYNC="${OPTION}"
	
	getOption new3dengine
	NEW3DENGINE="${OPTION}"
	
	getOption throttle
	THROTTLE="${OPTION}"
	
	getOption integerscale
	STRETCH="${OPTION}"
	
	getOption integerscale
	INTEGERSCALE="${OPTION}"
		
	getOption powerpcfrequency
	POWERPCFREQUENCY="${OPTION}"
	
	getOption rumble
	RUMBLE="${OPTION}"
	
	getOption emulatenet
	EMULATENET="${OPTION}"

    # Executa o Model 3
    exec /opt/Model3/Model3.sh "${ROM}" "${CORE}" "${RESOLUTION}" "${WIDESCREEN}" "${MULTITEXTURE}" "${MULTITHREAD}" "${QUADRENDERING}" "${VSYNC}" "${NEW3DENGINE}" "${THROTTLE}" "${STRETCH}" "${INTEGERSCALE}" "${POWERPCFREQUENCY}" "${RUMBLE}" "${EMULATENET}" "${P1GUID}"
fi

################################################################################

### 3DS

if [ "$SYSTEM" == '3ds' ]; then
    if [ "$EMULATOR" == 'citra' ] || [ "$EMULATOR" == 'auto' ]; then
        mouse-pointer on
    fi

    # Mii Data para o citra
    if ! [ -d "${SAVES_DIR}/3ds/citra-emu" ]; then
        mkdir -p "${SAVES_DIR}/3ds"
        cp -r "${BIOS_DIR}/citra" "${SAVES_DIR}/3ds/citra-emu"
    fi

    if ! [ -e "${SAVES_DIR}/3ds/Citra" ]; then
        ln -s "${SAVES_DIR}/3ds/citra-emu" "${SAVES_DIR}/3ds/Citra"
    fi
fi

################################################################################

### SONY PSP

if [ "$SYSTEM" == 'psp' ]; then
    # Suporte à DLCs.
    if [ -e "${ROMS_DIR}/psp/DLC.PSN" ] && [ ! -e "${SAVES_DIR}/psp/PSP/GAME" ]; then
        mkdir -p "${SAVES_DIR}/psp/PSP"
        ln -sf "${ROMS_DIR}/psp/DLC.PSN" "${SAVES_DIR}/psp/PSP/GAME"
    fi
fi

#################################################################################

### MSDOS

if [ "$SYSTEM" == 'dos' ]; then
    mouse-pointer on
fi

#################################################################################

### LINUX

if [ "$SYSTEM" == 'linux' ]; then
    # Carrega o jogo de uma pasta.
    if [ -d "$ROM" ]; then
        cd "$ROM"
        if ! [ -x ./batocera.plus ]; then
            chmod +x ./batocera.plus
        fi
        ./batocera.plus $@;
    elif [ -f "${ROM%plus}plus" ] || [ -f "${ROM%PLUS}PLUS" ]; then
        # Carrega o jogo compactado no formato squashfs.
        if mount "$ROM" $HOME/../extractions; then
            cd "$HOME/../extractions"
            ./batocera.plus $@;
            cd ..
            sleep 0.5
            umount -f "$HOME/../extractions"
        fi
    fi
    exit $?
fi

################################################################################

### WINDOWS

if [ "$SYSTEM" == 'windows' ] || [ "$SYSTEM" == 'mugen' ]; then

    ### Captura o nome da rom sem extenção ###

    ROM_NAME="$(basename "${ROM}")"

    if [ "${ROM_NAME}" == "${ROM_NAME%plus}plus" ]; then
        ROM_NAME="${ROM_NAME%.plus}"
    elif [ "${ROM_NAME}" == "${ROM_NAME%PLUS}PLUS" ]; then
        ROM_NAME="${ROM_NAME%.PLUS}"
    else
        exit 1
    fi

    ### Monta e acessa o diretório do jogo ###

    if [ -d "${ROM}" ]; then
        cd "${ROM}"
    elif [ -f "${ROM}" ]; then
        MOUNT_DIR="${EXTRACTIONS_DIR}/$(basename "${ROM}")"

        OVERLAY_DIR='/tmp/wine_overlay'
        LOWER_DIR="${OVERLAY_DIR}/lowerdir"
        UPPER_DIR="${OVERLAY_DIR}/upperdir"
        WORK_DIR="${OVERLAY_DIR}/workdir"

        mkdir -p "${MOUNT_DIR}" \
                 "${LOWER_DIR}" \
                 "${UPPER_DIR}" \
                 "${WORK_DIR}"

        if mount -o ro "${ROM}" "${LOWER_DIR}"; then
            if mount -t overlay -o rw,lowerdir="${LOWER_DIR}",upperdir="${UPPER_DIR}",workdir="${WORK_DIR}" overlay "${MOUNT_DIR}"; then
                ROM="${MOUNT_DIR}"
                cd "${MOUNT_DIR}"
            else
                exit $?
            fi
        else
            exit $?
        fi
    else
        exit 1
    fi

    ### Procura pelo executável do jogo ###
    ### batocera.plus, batocera.plus.exe, .plus.exe, .PLUS.EXE, .exe, .EXE ###

    GAME_EXE=''

    if [ -f 'batocera.plus' ]; then
        getOption script

        # Ignora script batocera.plus se ativado na interface do ES.

        if [ "${OPTION}" == 'auto' ] || [ "${OPTION}" == 'on' ]; then

            # Converte quebra de linhas para o padrão unix.
            if [ "$(dos2unix --info=c "${GAME_EXE}")" ]; then
                dos2unix "${GAME_EXE}"
            fi

            # Ativa a perrmisão de executável no script.
            if ! [ -x "${GAME_EXE}" ]; then
                chmod +x "${GAME_EXE}"
            fi

            GAME_EXE='batocera.plus'
        fi
    fi

    if [ -f 'batocera.plus' ] && [ -z "${GAME_EXE}" ]; then
        if [ -f 'batocera.plus.exe' ]; then
            GAME_EXE='batocera.plus.exe'
        fi
    fi

    if [ -z "${GAME_EXE}" ]; then
        GAME_EXE="$(ls -1 | grep -i '.plus.exe$' | head -n 1)"
    fi

    if [ -z "${GAME_EXE}" ]; then
        GAME_EXE="$(ls -1 | grep -i '.exe$' | head -n 1)"
    fi

    if [ -z "${GAME_EXE}" ]; then
        GAME_EXE="$(find . -type f -iname batocera.plus.exe -print -quit)"
    fi

    if [ -z "${GAME_EXE}" ]; then
        GAME_EXE="$(find . -type f -iname *.plus.exe -print -quit)"
    fi

    if [ -z "${GAME_EXE}" ]; then
        GAME_EXE="$(find . -type f -iname *.exe -print -quit)"
    fi

    if [ -z "${GAME_EXE}" ]; then
        GAME_EXE='explorer'
    fi

    cd "$(dirname "${GAME_EXE}")"
    GAME_EXE="$(basename "${GAME_EXE}")"


    ### Configura o save ###

    if [ "${GAME_EXE}" == 'batocera.plus' ]; then
        WIN_SAVE_DIR="$(grep '^WIN_SAVE_DIR=' batocera.plus | cut -d "'" -f 2)"

        if [ "${WIN_SAVE_DIR}" ]; then
            BATOCERA_SAVE="${SAVES_DIR}/windows/${ROM_NAME}"

            mkdir -p "${BATOCERA_SAVE}"

            WIN_SAVE_DIR="${SHARE}/system/configs/wine/${CORE}/drive_c/${WIN_SAVE_DIR:3}"

            if ! [ -d "${WIN_SAVE_DIR}" ]; then
                mkdir -p "${WIN_SAVE_DIR}/.."
                rm -r  "${WIN_SAVE_DIR}" 2> /dev/null
                ln -sf "${BATOCERA_SAVE}" "${WIN_SAVE_DIR}"
            fi
        fi
    fi

    ### Fecha o jogo pelo controle (hotkey + start) ###

    BOTOES="$(/opt/Wine/getHotkeyStart "${P1GUID}")"
    BOTAO_HOTKEY="$(echo "${BOTOES}" | cut -d ' ' -f 1)"
    BOTAO_START="$(echo "${BOTOES}"  | cut -d ' ' -f 2)"

    if [ "${BOTAO_HOTKEY}" ] && [ "${BOTAO_START}" ]; then
        # Impede que o xjoykill seja encerrado enquanto o jogo está em execução.
        while : ; do
            nice -n 20 xjoykill -hotkey "${BOTAO_HOTKEY}" -start "${BOTAO_START}" -kill /usr/bin/killwine
            if ! [ "$(pidof wineserver)" ]; then
                break
            fi
            sleep 5
        done &
    fi

    ### Ativa o FSYNC e ESYNC ###

    getOption sync

    case ${OPTION} in
        fsync)
            export WINEFSYNC=1
            ;;
        esync)
            export WINEESYNC=1
            ;;
        default)
            export WINEESYNC=0
            export WINEFSYNC=0
            ;;
    esac

    ### DirectX Engine ###

    getOption directx

    case ${OPTION} in
        dxvk)
            export DXVK=1
            export PBA_ENABLE=0
            ;;
        pba)
            export vblank_mode=0
            export __GL_SYNC_TO_VBLANK=0
            export __GL_SHADER_CACHE=1
            export __GL_SHADER_DISK_CACHE=1
            export __GL_SHADER_DISK_CACHE_SKIP_CLEANUP=1
            export __GL_SHADER_DISK_CACHE_PATH=/userdata/system/.cache/shader_cache
            export MESA_GLSL_CACHE_DISABLE=0
            export MESA_GLSL_CACHE_DIR=/userdata/system/.cache/shader_cache
            export PBA_ENABLE=1
            ;;
        default|auto)
            export vblank_mode=1
            export __GL_SYNC_TO_VBLANK=1
            export PBA_ENABLE=0
            ;;
    esac

    ### Otimizações ###

    getOption optimizations

    case ${OPTION} in
        nvidia|nvidia_generic)
            export __GL_THREADED_OPTIMIZATIONS=1
            ;;
        amd|amd_generic)
            export R600_DEBUG=nohyperz
            export mesa_glthread=true
            ;;
        intel|intel_generic)
            export MESA_GL_VERSION_OVERRIDE=4.5COMPAT
            ;;
        none|auto)
            ;;
    esac

    case ${OPTION} in
        generic|nvidia_generic|amd_generic|intel_generic)
            export WINEDEBUG=-all
            export STAGING_WRITECOPY=1
            export STAGING_SHARED_MEMORY=1
            export STAGING_RT_PRIORITY_BASE=90
            export STAGING_RT_PRIORITY_SERVER=90
            if [ "${CORE}" == 'auto' ]; then
                for i in /opt/Wine/wine-*/bin/wineserver /opt/Wine/proton-*/bin/wineserver; do
                    setcap cap_sys_nice+ep ${i}
                done
            else
                setcap cap_sys_nice+ep "/opt/Wine/${CORE}/bin/wineserver"
            fi
            ;;
        none|auto)
            ;;
    esac

    ### Mostra a utilização do hardware ###

    getOption showfps

    if [ "${OPTION}" == 'on' ]; then
       export LD_PRELOAD=/usr/lib/mangohud
       export MANGOHUD_DLSYM=1
       export MANGOHUD=1
    elif [ "${OPTION}" == 'off' ] || [ "${OPTION}" == 'auto' ]; then
       unset LD_PRELOAD
       unset MANGOHUD_DLSYM
       unset MANGOHUD
    fi

    ### Pula os vídeos ###

    getOption skip_videos

    case "${OPTION}" in 
        off)
            export WINEDLLOVERRIDES='winegstreamer=b'
            ;;
        on)
            export WINEDLLOVERRIDES='winegstreamer=d'
            ;;
        auto)
            ;;
        *)
            echo "error, option ${OPTION} not supported to skip videos."
            exit 1
    esac

    ### Ativa a emulação do controle pelo teclado ###

    getOption emulate_joypad

    if [ "${OPTION}" == 'on' ] && [ -e '/dev/input/js0' ]; then
        # Não executa o xjoypad se não for encontrado nenhum controle conectado.
        # Impede que o xjoypad seja encerrado enquanto o jogo está em execução.
        if [ -e '/dev/input/js0' ]; then
            while : ; do
                nice -n -15 xjoypad -device /dev/input/js0 \
                                    -up 111 -down  116 -left  113 -right 114 \
                                    -buttons 25 27 28 29 30 31 32 42 44 45 46 55 56 57 58

                if ! [ "$(pidof wineserver)" ]; then
                    break
                fi
                sleep 5
            done &
        fi
    fi

    ### Exibe o ponteiro do mouse ###

    getOption mouse_pointer

    if [ "${OPTION}" == 'on' ] || [ "${GAME_EXE}" == 'explorer' ] ; then
        mouse-pointer on
    fi

    ### Define a versão padrão do wine (auto) ###

    if [ "${CORE}" == 'auto' ]; then
        CORE='wine'
    fi

    ### Virtual Desktop (Video Mode) ###

    # Captura a resolução da área de trabalho antes do jogo ser carregado
    RES_START="$(batocera-resolution currentMode)"

    getOption videomode

    if [ "${OPTION}" != 'auto' ]; then
        export VIRTUAL_DESKTOP=1
        batocera-resolution setMode ${OPTION}
    fi

    ### Executa o jogo ###

    # Arquitetura do executável

    getOption arch

    if [ "${OPTION}" == 'auto' ] || [ "${OPTION}" == '32' ]; then
        OPTION=''
    fi

    case "${GAME_EXE}" in
        batocera.plus)
            # A variável core será usada pelo script principal do wine para forçar
            # a utilização de um determinado core quando escolhido na interface do ES.
            export CORE
            ./batocera.plus "${@}"
            ;;
        explorer)
            ${CORE}${OPTION} "${GAME_EXE}" "z:/userdata/roms/windows/${ROM}"
            ;;
        *)
            ${CORE}${OPTION} "${GAME_EXE}"
            ;;
    esac

    ### Aguarda o jogo encerrar a execução ###

    while [ "$(pidof wineserver)" ]; do
        sleep 1
    done

    ### Mata o emulador de teclado ###

    if [ "$(pidof -s xjoykill)" ]; then
        killall -9 xjoykill
    fi
    if [ "$(pidof -s xjoypad)" ]; then
        killall -9 xjoypad
    fi

    ### Ativa o ponteiro do mouse ###
 
    getOption mouse_pointer

    if [ "${OPTION}" == 'on' ]; then
        mouse-pointer off
    fi

    wait

    ### Restaura a resolução, caso o jogo tenha mudado ###

    RES_STOP="$(batocera-resolution currentResolution)"

    if [ "${RES_START}" != "${RES_STOP}" ]; then
        batocera-resolution setMode "${RES_START}"
    fi

    ### Desmonta imagem squashfs.

    if [ "${ROM}" == "${MOUNT_DIR}" ]; then
        cd "${MOUNT_DIR}/.."

        umount -f "${MOUNT_DIR}"
        umount -f "${LOWER_DIR}"

        rmdir "${MOUNT_DIR}"
        rm -r "${OVERLAY_DIR}"
    fi

    exit 0
fi

################################################################################

### OPENBOR

if [ "$SYSTEM" == 'openbor' ]; then
    exec /opt/OpenBOR/OpenBOR.sh "$CORE" "$ROM"
fi

################################################################################

### INTERNET

if [ "$SYSTEM" == 'internet' ]; then
    exec /opt/Firefox/firefox.sh "$SYSTEM" "$ROM"
fi

################################################################################

### MAME

#if [ "$SYSTEM" == 'mame' ]; then
#    ln -sf '/usr/share/batocera/datainit/decorations/default/systems/mame2.png' '/usr/share/batocera/datainit/decorations/default/systems/mame.png'
#fi

################################################################################

### SNES - MESS

#if [ "$SYSTEM" == 'snes' ] && [ "$CORE" == 'mess' ]; then
#    ### Adiciona parametros extras para o mess.
#    ### Agrascimentos a "Sérgio De Carvalho Júnior" pelos parametros.#
#
#    ROM="snes -rompath /userdata/roms/mame -cart \\\"$ROM\\\""
#    SYSTEM='mame'
#    CORE='mame'
#
#    ### Força a ativação do boot_from_cli
#
#    CORE_CFG="$HOME/configs/retroarch/cores/retroarch-core-options.cfg"
#    if ! [ -f "$CORE_CFG" ]; then
#        mkdir -p "$(dirname "$CORE_CFG")"
#        echo 'mame_boot_from_cli = "enabled"' > "$CORE_CFG"
#    elif [ "$(grep 'mame_boot_from_cli' "$CORE_CFG" )" ]; then
#        sed -i 's/^mame_boot_from_cli.*/mame_boot_from_cli = "enabled"/' "$CORE_CFG"
#    else
#        echo 'mame_boot_from_cli = "enabled"' > "$CORE_CFG"
#    fi
#
#    # Saves
#    rm -r    "/userdata/saves/mame/mame/nvram/snes"
#    mkdir -p '/userdata/saves/snes'
#    ln -sf   '/userdata/saves/snes' '/userdata/saves/mame/mame/nvram/snes'
#
#    ### Decorações de Janela
#    ln -sf '/usr/share/batocera/datainit/decorations/default/systems/snes.png' '/usr/share/batocera/datainit/decorations/default/systems/mame.png'
#
#    sleep 0.2
#fi

################################################################################

### FLASH

if [ "$SYSTEM" == 'flash' ]; then
    mouse-pointer on
    exec /opt/Firefox/firefox.sh "$SYSTEM" "$ROM"
fi

################################################################################

### EXECUTA A ROM

EXEC_EMU="$(
    echo -n 'exec python /usr/lib/python2.7/site-packages/configgen/emulatorlauncher.py'

    test -z "$P1INDEX"      || echo -n ' -p1index '      "$P1INDEX"
    test -z "$P1GUID"       || echo -n ' -p1guid '       "$P1GUID"
    test -z "$P1NAME"       || echo -n ' -p1name '     "\"$P1NAME\""
    test -z "$P1NBBUTTONS"  || echo -n ' -p1nbbuttons '  "$P1NBBUTTONS"
    test -z "$P1NBHATS"     || echo -n ' -p1nbhats '     "$P1NBHATS"
    test -z "$P1NBAXES"     || echo -n ' -p1nbaxes '     "$P1NBAXES"
    test -z "$P1DEVICEPATH" || echo -n ' -p1devicepath ' "$P1DEVICEPATH"

    test -z "$P2INDEX"      || echo -n ' -p2index '      "$P2INDEX"
    test -z "$P2GUID"       || echo -n ' -p2guid '       "$P2GUID"
    test -z "$P2NAME"       || echo -n ' -p2name '     "\"$P2NAME\""
    test -z "$P2NBBUTTONS"  || echo -n ' -p2nbbuttons '  "$P2NBBUTTONS"
    test -z "$P2NBHATS"     || echo -n ' -p2nbhats '     "$P2NBHATS"
    test -z "$P2NBAXES"     || echo -n ' -p2nbaxes '     "$P2NBAXES"
    test -z "$P2DEVICEPATH" || echo -n ' -p2devicepath ' "$P2DEVICEPATH"

    test -z "$P3INDEX"      || echo -n ' -p3index '      "$P3INDEX"
    test -z "$P3GUID"       || echo -n ' -p3guid '       "$P3GUID"
    test -z "$P3NAME"       || echo -n ' -p3name '     "\"$P3NAME\""
    test -z "$P3NBBUTTONS"  || echo -n ' -p3nbbuttons '  "$P3NBBUTTONS"
    test -z "$P3NBHATS"     || echo -n ' -p3nbhats '     "$P3NBHATS"
    test -z "$P3NBAXES"     || echo -n ' -p3nbaxes '     "$P3NBAXES"
    test -z "$P3DEVICEPATH" || echo -n ' -p3devicepath ' "$P3DEVICEPATH"

    test -z "$P4INDEX"      || echo -n ' -p4index '      "$P4INDEX"
    test -z "$P4GUID"       || echo -n ' -p4guid '       "$P4GUID"
    test -z "$P4NAME"       || echo -n ' -p4name '     "\"$P4NAME\""
    test -z "$P4NBBUTTONS"  || echo -n ' -p4nbbuttons '  "$P4NBBUTTONS"
    test -z "$P4NBHATS"     || echo -n ' -p4nbhats '     "$P4NBHATS"
    test -z "$P4NBAXES"     || echo -n ' -p4nbaxes '     "$P4NBAXES"
    test -z "$P4DEVICEPATH" || echo -n ' -p4devicepath ' "$P4DEVICEPATH"

    test -z "$P5INDEX"      || echo -n ' -p5index '      "$P5INDEX"
    test -z "$P5GUID"       || echo -n ' -p5guid '       "$P5GUID"
    test -z "$P5NAME"       || echo -n ' -p5name '     "\"$P5NAME\""
    test -z "$P5NBBUTTONS"  || echo -n ' -p5nbbuttons '  "$P5NBBUTTONS"
    test -z "$P5NBHATS"     || echo -n ' -p5nbhats '     "$P5NBHATS"
    test -z "$P5NBAXES"     || echo -n ' -p5nbaxes '     "$P5NBAXES"
    test -z "$P5DEVICEPATH" || echo -n ' -p5devicepath ' "$P5DEVICEPATH"

    test -z "$P6INDEX"      || echo -n ' -p6index '      "$P6INDEX"
    test -z "$P6GUID"       || echo -n ' -p6guid '       "$P6GUID"
    test -z "$P6NAME"       || echo -n ' -p6name '     "\"$P6NAME\""
    test -z "$P6NBBUTTONS"  || echo -n ' -p6nbbuttons '  "$P6NBBUTTONS"
    test -z "$P6NBHATS"     || echo -n ' -p6nbhats '     "$P6NBHATS"
    test -z "$P6NBAXES"     || echo -n ' -p6nbaxes '     "$P6NBAXES"
    test -z "$P6DEVICEPATH" || echo -n ' -p6devicepath ' "$P6DEVICEPATH"

    test -z "$P7INDEX"      || echo -n ' -p7index '      "$P7INDEX"
    test -z "$P7GUID"       || echo -n ' -p7guid '       "$P7GUID"
    test -z "$P7NAME"       || echo -n ' -p7name '     "\"$P7NAME\""
    test -z "$P7NBBUTTONS"  || echo -n ' -p7nbbuttons '  "$P7NBBUTTONS"
    test -z "$P7NBHATS"     || echo -n ' -p7nbhats '     "$P7NBHATS"
    test -z "$P7NBAXES"     || echo -n ' -p7nbaxes '     "$P7NBAXES"
    test -z "$P7DEVICEPATH" || echo -n ' -p7devicepath ' "$P7DEVICEPATH"

    test -z "$P8INDEX"      || echo -n ' -p8index '      "$P8INDEX"
    test -z "$P8GUID"       || echo -n ' -p8guid '       "$P8GUID"
    test -z "$P8NAME"       || echo -n ' -p8name '     "\"$P8NAME\""
    test -z "$P8NBBUTTONS"  || echo -n ' -p8nbbuttons '  "$P8NBBUTTONS"
    test -z "$P8NBHATS"     || echo -n ' -p8nbhats '     "$P8NBHATS"
    test -z "$P8NBAXES"     || echo -n ' -p8nbaxes '     "$P8NBAXES"
    test -z "$P8DEVICEPATH" || echo -n ' -p8devicepath ' "$P8DEVICEPATH"

    test -z "$SYSTEM"       || echo -n ' -system '       "$SYSTEM"
    test -z "$ROM"          || echo -n ' -rom '        "\"$ROM\""
)"

echo "$EXEC_EMU" > "$HOME/logs/es_launch_plus.log"
exec /bin/sh -c "$EXEC_EMU"

################################################################################
