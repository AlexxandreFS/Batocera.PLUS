#!/bin/bash
################################################################################
### BATOCERA.PLUS
### Alexandre Freire dos Santos
### alexxandre.freire@gmail.com
################################################################################

### CAMINHOS

readonly SHARE='/userdata'

readonly BIOS_DIR="${SHARE}/bios"
readonly SAVES_DIR="${SHARE}/saves"
readonly ROMS_DIR="${SHARE}/roms"
readonly EXTRACTIONS_DIR="${SHARE}/extractions"
readonly DATAINIT_DIR=/usr/share/batocera/datainit
readonly LOG_DIR="${HOME}/logs"

readonly BATOCERA_CONF="${HOME}/batocera.conf"
readonly RETROARCH_CONF="${HOME}/configs/retroarch/retroarchcustom.cfg"
readonly RETROARCH_CORE_CONF="${HOME}/configs/retroarch/cores/retroarch-core-options.cfg"

readonly JAVA_HOME=/opt/Java
readonly MANGOHUD_DIR=/opt/MangoHud
readonly VKBASALT_DIR=/opt/vkBasalt

################################################################################

### ATIVA/DESATIVA A TELA DE CARREGAMENTO

if [ -z "${LOADSCREEN}" ]; then
    LOADSCREEN=1
fi

################################################################################

### CAPTURA DE PARAMETROS.

P1INDEX=''; P1GUID=''; P1NAME=''  ; P1NBBUTTONS=''; P1NBHATS=''; P1NBAXES=''; P1DEVICEPATH=''
P2INDEX=''; P2GUID=''; P2NAME=''  ; P2NBBUTTONS=''; P2NBHATS=''; P2NBAXES=''; P2DEVICEPATH=''
P3INDEX=''; P3GUID=''; P3NAME=''  ; P3NBBUTTONS=''; P3NBHATS=''; P3NBAXES=''; P3DEVICEPATH=''
P4INDEX=''; P4GUID=''; P4NAME=''  ; P4NBBUTTONS=''; P4NBHATS=''; P4NBAXES=''; P4DEVICEPATH=''
P5INDEX=''; P5GUID=''; P5NAME=''  ; P5NBBUTTONS=''; P5NBHATS=''; P5NBAXES=''; P5DEVICEPATH=''
P1INDEX=''; P6GUID=''; P6NAME=''  ; P6NBBUTTONS=''; P6NBHATS=''; P6NBAXES=''; P6DEVICEPATH=''
P2INDEX=''; P7GUID=''; P7NAME=''  ; P7NBBUTTONS=''; P7NBHATS=''; P7NBAXES=''; P7DEVICEPATH=''
P3INDEX=''; P8GUID=''; P8NAME=''  ; P8NBBUTTONS=''; P8NBHATS=''; P8NBAXES=''; P8DEVICEPATH=''
SYSTEM='' ; ROM=''   ; EMULATOR=''; CORE=''

FOUND=''

for i in "$@"; do
    if [ "$FOUND" == '' ]; then
        case "$i" in
            -p1index|-p1guid|-p1name|-p1nbbuttons|-p1nbhats|-p1nbaxes|-p1devicepath| \
            -p2index|-p2guid|-p2name|-p2nbbuttons|-p2nbhats|-p2nbaxes|-p2devicepath| \
            -p3index|-p3guid|-p3name|-p3nbbuttons|-p3nbhats|-p3nbaxes|-p3devicepath| \
            -p4index|-p4guid|-p4name|-p4nbbuttons|-p4nbhats|-p4nbaxes|-p4devicepath| \
            -p5index|-p5guid|-p5name|-p5nbbuttons|-p5nbhats|-p5nbaxes|-p5devicepath| \
            -p3index|-p6guid|-p6name|-p6nbbuttons|-p6nbhats|-p6nbaxes|-p6devicepath| \
            -p4index|-p7guid|-p7name|-p7nbbuttons|-p7nbhats|-p7nbaxes|-p7devicepath| \
            -p5index|-p8guid|-p8name|-p8nbbuttons|-p8nbhats|-p8nbaxes|-p8devicepath| \
            -system |-rom)
                FOUND="$i"
            ;;
        esac
    else
        case "$FOUND" in
        -p1index)      P1INDEX="$i"      ;;
        -p1guid)       P1GUID="$i"       ;;
        -p1name)       P1NAME="$i"       ;;
        -p1nbbuttons)  P1NBBUTTONS="$i"  ;;
        -p1nbhats)     P1NBHATS="$i"     ;;
        -p1nbaxes)     P1NBAXES="$i"     ;;
        -p1devicepath) P1DEVICEPATH="$i" ;;

        -p2index)      P2INDEX="$i"      ;;
        -p2guid)       P2GUID="$i"       ;;
        -p2name)       P2NAME="$i"       ;;
        -p2nbbuttons)  P2NBBUTTONS="$i"  ;;
        -p2nbhats)     P2NBHATS="$i"     ;;
        -p2nbaxes)     P2NBAXES="$i"     ;;
        -p2devicepath) P2DEVICEPATH="$i" ;;

        -p3index)      P3INDEX="$i"      ;;
        -p3guid)       P3GUID="$i"       ;;
        -p3name)       P3NAME="$i"       ;;
        -p3nbbuttons)  P3NBBUTTONS="$i"  ;;
        -p3nbhats)     P3NBHATS="$i"     ;;
        -p3nbaxes)     P3NBAXES="$i"     ;;
        -p3devicepath) P3DEVICEPATH="$i" ;;

        -p4index)      P4INDEX="$i"      ;;
        -p4guid)       P4GUID="$i"       ;;
        -p4name)       P4NAME="$i"       ;;
        -p4nbbuttons)  P4NBBUTTONS="$i"  ;;
        -p4nbhats)     P4NBHATS="$i"     ;;
        -p4nbaxes)     P4NBAXES="$i"     ;;
        -p4devicepath) P4DEVICEPATH="$i" ;;

        -p5index)      P5INDEX="$i"      ;;
        -p5guid)       P5GUID="$i"       ;;
        -p5name)       P5NAME="$i"       ;;
        -p5nbbuttons)  P5NBBUTTONS="$i"  ;;
        -p5nbhats)     P5NBHATS="$i"     ;;
        -p5nbaxes)     P5NBAXES="$i"     ;;
        -p5devicepath) P5DEVICEPATH="$i" ;;

        -p6index)      P6INDEX="$i"      ;;
        -p6guid)       P6GUID="$i"       ;;
        -p6name)       P6NAME="$i"       ;;
        -p6nbbuttons)  P6NBBUTTONS="$i"  ;;
        -p6nbhats)     P6NBHATS="$i"     ;;
        -p6nbaxes)     P6NBAXES="$i"     ;;
        -p6devicepath) P6DEVICEPATH="$i" ;;

        -p7index)      P7INDEX="$i"      ;;
        -p7guid)       P7GUID="$i"       ;;
        -p7name)       P7NAME="$i"       ;;
        -p7nbbuttons)  P7NBBUTTONS="$i"  ;;
        -p7nbhats)     P7NBHATS="$i"     ;;
        -p7nbaxes)     P7NBAXES="$i"     ;;
        -p7devicepath) P7DEVICEPATH="$i" ;;

        -p8index)      P8INDEX="$i"      ;;
        -p8guid)       P8GUID="$i"       ;;
        -p8name)       P8NAME="$i"       ;;
        -p8nbbuttons)  P8NBBUTTONS="$i"  ;;
        -p8nbhats)     P8NBHATS="$i"     ;;
        -p8nbaxes)     P8NBAXES="$i"     ;;
        -p8devicepath) P8DEVICEPATH="$i" ;;

        -system)       SYSTEM="$i"       ;;
        -rom)          ROM="$i"          ;;
        esac

        FOUND=''
    fi
done

################################################################################

### LER OPÇÕES DE JOGO CONFIGURADAS PELO USUÁRIO NO ES.

OPTION=''

function getOption() {
    local SEARCH="${1}"

    OPTION='auto'
    OPTION="$(grep -F "${SYSTEM}[\"$(basename "${ROM}")\"].${SEARCH}=" "${BATOCERA_CONF}" | cut -d '=' -f 2)"
    if [ ! "${OPTION}" == '' ] && [ ! "${OPTION}" == 'auto' ]; then
        return 0
    fi

    OPTION='auto'
    OPTION="$(grep "^${SYSTEM}.${SEARCH}=" "${BATOCERA_CONF}" | cut -d '=' -f 2)"
    if [ ! "${OPTION}" == '' ] && [ ! "${OPTION}" == 'auto' ]; then
        return 0
    fi

    OPTION='auto'
    OPTION="$(grep "^global.${SEARCH}=" "${BATOCERA_CONF}" | cut -d '=' -f 2)"
    if [ ! "${OPTION}" == '' ] && [ ! "${OPTION}" == 'auto' ]; then
        return 0
    fi

    OPTION='auto'
}

################################################################################

### DEFAULT EMULATOR and CORE

getOption emulator
EMULATOR="${OPTION}"

getOption core
CORE="${OPTION}"

################################################################################

### LOAD SCREEN START

if [ "${LOADSCREEN}" == '1' ]; then

    # Define o nome do tema.
    if [ -f "$SHARE/system/configs/emulationstation/es_settings.cfg" ]; then
        THEME_NAME="$(cat "$SHARE/system/configs/emulationstation/es_settings.cfg" | grep '<string name="ThemeSet" value=' | cut -d '"' -f 4)"
        if ! [ "$THEME_NAME" ]; then
            THEME_NAME='batocera-plus'
        fi
    else
        THEME_NAME='batocera-plus'
    fi

    # Define diretorio do tema.
    if [ -d "$SHARE/themes/$THEME_NAME" ]; then
        THEME_DIR="$SHARE/themes/$THEME_NAME"
    elif [ -d "/etc/emulationstation/themes/$THEME_NAME" ]; then
        THEME_DIR="/etc/emulationstation/themes/$THEME_NAME"
    else
        THEME_DIR="/etc/emulationstation/themes/batocera-plus"
    fi

    # Define o nome da imagem de carregamento.
    if [ -f "$THEME_DIR/loadscreen/$SYSTEM.png" ]; then
        IMG_NAME="$THEME_DIR/loadscreen/$SYSTEM.png"
    elif [ -f "$THEME_DIR/loadscreen/$SYSTEM.jpg" ]; then
        IMG_NAME="$THEME_DIR/loadscreen/$SYSTEM.jpg"
    elif [ -f '/etc/emulationstation/themes/batocera-plus/loadscreen/loadscreen.png' ]; then
        IMG_NAME='/etc/emulationstation/themes/batocera-plus/loadscreen/loadscreen.png'
    elif [ -f '/etc/emulationstation/themes/batocera-plus/loadscreen/loadscreen.jpg' ]; then
        IMG_NAME='/etc/emulationstation/themes/batocera-plus/loadscreen/loadscreen.jpg'
    fi

    # Exibe a tela de carregamento.
    batocera-load-screen -t 10 -i "${IMG_NAME}" &
    START_TIME="$(date +%s)"
fi

################################################################################

### CONFIGURA A ROM PARA SER EXECUTADA POR ARQUIVO DE TEXTO.
### Útil para usar as roms de um sistema em outro sem duplicar arquivos.

if [ -f "${ROM}" ]; then
    if [ "$(ls -l "${ROM}" | awk '{print $5}')" -lt 33 ]; then
        ROM_TXT="$(head -n 1 "${ROM}")"
        if [ "$(echo "${ROM_TXT}" | grep '^#')" ]; then
            ROM_NAME="$(basename "${ROM}")"
            ROM_DIR="$(dirname "${ROM}")"
            ROM_SYS="$(echo "${ROM_TXT}" | grep '^#' | cut -d '#' -f 2-)"
            ROM_NEW="$(dirname "${ROM_DIR}")"
            ROM="${ROM_NEW}/${ROM_SYS}/${ROM_NAME}"
        fi
    fi
fi

################################################################################

### DESCOMPACTA ROM NO FORMATO DO 7ZIP

function un7zip() {
    ### Pega o nome da rom sem a extenção.
    ### Somente executa o script para arquivos compactados pelo 7zip.
    ROM_DIR="$(dirname  "$ROM")"
    if [ -f "$ROM_DIR/$(basename "$ROM" 7z)7z" ]; then
        local ROM_FILE="$(basename "$ROM" .7z)"
        local ROM_EXT='7z'
    elif [ -f "$ROMDIR/$(basename "$ROM" 7Z)7Z" ]; then
        local ROM_FILE="$(basename "$ROM" .7Z)"
        local ROM_EXT='7Z'
    else
        if df | grep -qE "${EXTRACTIONS_DIR}$"; then
            umount -fl "${EXTRACTIONS_DIR}"
        fi
        return 0
    fi

    ### Cria o disco ram para desompactar a rom.
    ### Somente se o computador tiver 8G de memória ou mais.
    if ! df | grep -qE "/userdata/extractions$"; then
        local FREE_MEM="$(free -m | head -n 2 | tail -n 1 | awk '{print $2}')"
        if [ "${FREE_MEM}" -gt '7000' ]; then
            mount -t tmpfs -o rw,size=1800M tmpfs /userdata/extractions
        fi
    fi

    ### Procura por arquivo principal da rom (.cue .ccd .lst etc...)
    ### no diretório de roms descompactadas.
    for ((i = 0; i != 2; i++)); do
        for j in $1; do
            if [ -d "$EXTRACTIONS_DIR/$ROM_FILE" ]; then
                if [ -f "$EXTRACTIONS_DIR/$ROM_FILE/$ROM_FILE$j" ]; then
                    # Quando um core alternativo é escolhido para uma rom no formato 7z
                    # o emulationstation salva no arquivo batocera.conf o nome da rom com a exteção 7z ou 7Z
                    # como a rom vai ser descompactada é preciso mudar a exteção da rom no arquivo batocera.conf
                    # para o formato descompactado (cue, ccd, iso, etc...)
                    # Dependendo do nome da rom ela pode ter caracteres especiais, a finalidade deste código é
                    # usar caracteres de escape para permitir que ela seja usada no comando sed.
                    for i in "$(grep -F "$(basename "$ROM")" "$BATOCERA_CONF" | sed "s/.$ROM_EXT./$j\"/")"; do
                        local ROM_NAME_ESC=$(sed 's/[^^]/[&]/g; s/\^/\\^/g' <<< "${ROM_FILE}$j")
                        sed -i "/$ROM_NAME_ESC/d" "$BATOCERA_CONF"
                        echo "$i" >> "$BATOCERA_CONF"
                    done
                    ROM="$EXTRACTIONS_DIR/$ROM_FILE/$ROM_FILE$j"
                    return 0
                fi
            elif [ -f "$EXTRACTIONS_DIR/$ROM_FILE$j" ]; then
                for i in "$(grep -F "$(basename "$ROM")" "$BATOCERA_CONF" | sed "s/.$ROM_EXT./$j\"/")"; do
                    local ROM_NAME_ESC=$(sed 's/[^^]/[&]/g; s/\^/\\^/g' <<< "${ROM_FILE}$j")
                    sed -i "/$ROM_NAME_ESC/d" "$BATOCERA_CONF"
                    echo "$i" >> "$BATOCERA_CONF"
                done
                ROM="$EXTRACTIONS_DIR/$ROM_FILE$j"
                return 0
            fi
        done

        ### Evita que a ISO seja descompactada duas vezes.
        ### Isso acontece quando a rom está em um formato não aceito.
        if (( $i > 0 )); then
            return 1
        fi

        ### Limpa a pasta temporária de descompactação.
        if [ "$(ls $EXTRACTIONS_DIR)" ]; then
            rm -r "$EXTRACTIONS_DIR/"*
        fi

        ### Extende o tempo da tela de carregamento enquanto a rom é descompactada.
        if [ "${LOADSCREEN}" == '1' ]; then
            sleep 3
            # Existem jogos que descompactam em menos de 3 segundos.
            if [ "$(pidof 7zr)" ]; then
                batocera-load-screen -i '/etc/emulationstation/themes/batocera-plus/loadscreen/loadscreen.png'
            fi
        fi &

        ### Descompacta a rom.
        7zr x "$ROM" "-o$EXTRACTIONS_DIR" -bb0
    done
}

case $SYSTEM in
    3do)           un7zip '.cue .CUE .iso .ISO .bin .BIN .chd .CHD' ;;
    psx)           un7zip '.ccd .CCD .cue .CUE .mdf .MDF .chd .CHD .cbn .CBN .m3u .M3U .pbp .PBP .toc .TOC .iso .ISO .bin .BIN .img .IMG' ;;
    psxmini)       un7zip '.ccd .CCD .cue .CUE .mdf .MDF .chd .CHD .cbn .CBN .m3u .M3U .pbp .PBP .toc .TOC .iso .ISO .bin .BIN .img .IMG' ;;
    psp)           un7zip '.iso .ISO .cso .CSO .pbp .PBP' ;;
    pspminis)      un7zip '.iso .ISO .cso .CSO .pbp .PBP' ;;
    ps2)           un7zip '.mdf .MDF .iso .ISO .nrg .NRG .bin .BIN .img .IMG .dump .DUMP .cso .CSO .gz .GZ' ;;
    gamecube)      un7zip '.ciso .CISO .iso .ISO .gc .GC .gcz .GCZ .wbfs .WBFS .gcm .GCM .rvz .RVZ' ;;
    wii)           un7zip '.iso .ISO .wbfs .WBFS .dol .DOL .gcm .GCM .ciso .CISO .gcz .GCZ .wad .WAD .rvz .RVZ' ;;
    3ds)           un7zip '.3ds .3DS .3dsx .3DSX .elf .ELF .axf .AXF .cci .CCI .cxi .CXI' ;;
    segacd)        un7zip '.cue .CUE .chd .CHD .iso .ISO' ;;
    saturn)        un7zip '.ccd .CCD .cue .CUE .m3u .M3U .chd .CHD .iso .ISO .bin .BIN' ;;
    dreamcast)     un7zip '.cue .CUE .m3u .M3U .cdi .CDI .gdi .GDI .chd .CHD' ;;
    naomi)         un7zip '.lst .LST .bin .BIN .dat .DAT' ;;
    neogeocd)      un7zip '.cue .CUE .chd .CHD .iso .ISO' ;;
    atomiswave)    un7zip '.lst .LST .bin .BIN .dat .DAT' ;;
    naomi)         un7zip '.lst .LST .bin .BIN .dat .DAT' ;;
    arcade)        un7zip '.lst .LST .bin .BIN .dat .DAT .fba .FBA' ;;
    snescd)        un7zip '.smc .SMC .sfc .SFC' ;;
    n64)           un7zip '.z64 .Z64 .n64 .N64 .v64 .V64' ;;
    n64dd)         un7zip '.z64 .Z64 .n64 .N64 .v64 .V64 .ndd .NDD' ;;
    amigacd32)     un7zip '.cue .CUE .lha .LHA .iso .ISO ' ;;
    pcenginecd)    un7zip '.cue .CUE .ccd .CCD .pce .PCE .chd .CHD .iso .ISO .bin .BIN .img .IMG' ;;
    jaguar)        un7zip '.ccd .CCD .cue .CUE .j64 .J64 .jag .JAG .iso .ISO .bin .BIN' ;;
    amigacdtv)     un7zip '.cue .CUE .iso .ISO .bin .BIN' ;;
    megadrivemsu1) un7zip '.md .MD .gen .GEN .sg .SG .smd .SMD' ;;
    pcfx)          un7zip '.ccd .CCD .cue .CUE .toc .TOC .chd .CHD' ;;
    *)
        if df | grep -qE "${EXTRACTIONS_DIR}$"; then
            umount -fl "${EXTRACTIONS_DIR}"
        fi
esac

################################################################################

### EXECUTA A ROM DENTRO DE UMA PASTA

function runInFolder {

    # Ignora sistemas que utilizam roms dentro de pastas nativamente como por
    # exemplo  msdos windows e linux 
    case "$SYSTEM" in
        dos|windows|mugen|linux|daphne) return 0 ;;
    esac

    # Verifica se o nome do arquivo principal da rom (.cue .iso) tem o mesmo
    # nome e extensão da pasta com a rom, se tiver configura para executar a
    # rom sem tentar adivinhar a sua extensão.
    ROM_NAME="$(basename "$ROM")"
    if [ -f "$ROM/$ROM_NAME" ]; then
        ROM="$ROM/$ROM_NAME"
        return 0
    fi

    # Tenta adivinhar a extensão do arquivo principal da rom.
    ROM_EXTENSION='.ccd .CCD .cue .CUE .lst .LST .toc .TOC .sfc .SFC .smc .SMC .chd .CHD .ciso .CISO .cso .CSO .wbfs .WBFS .cdi .CDI .gc .GC .pbp .PBP .dump .DUMP .gcm .GCM .wad .WAD .gcz .GCZ .gdi .GDI .2hd .2HD .32x .32X .3ds .3DS .3dsx .3DSX .88d .88D .a26 .A26 .a52 .A52 .a78 .A78 .adf .ADF .adz .ADZ .app .APP .atr .ATR .atx .ATX .axf .AXF .bs .BS .cas .CAS .cbn .CBN .cci .CCI .cdm .CDM .cdt .CDT .cmd .CMD .col .COL .cpc .CPC .crt .CRT .ctr .CTR .cxi .CXI .d64 .D64 .d71 .D71 .d80 .D80 .d81 .D81 .d82 .D82 .d88 .D88 .dim .DIM .dms .DMS .do .DO .dol .DOL .dsk .DSK .dup .DUP .elf .ELF .exe .EXE .fba .FBA .fds .FDS .fig .FIG .g41 .G41 .g64 .G64 .gam .GAM .gb .GB .gba .GBA .gbc .GBC .gen .GEN .gg .GG .hdf .HDF .hdm .HDM .int .INT .ipf .IPF .itv .ITV .iwad .IWAD .j64 .J64 .jag .JAG .lha .LHA .lnx .LNX .lua .LUA .lutro .LUTRO .m3u .M3U .md .MD .mgd .MGD .mgt .MGT .mgw .MGW .moonlight .MOONLIGHT .mx1 .MX1 .mx2 .MX2 .n64 .N64 .nds .NDS .nes .NES .ngc .NGC .ngp .NGP .nib .NIB .p .P .p00 .P00 .pak .PAK .pce .PCE .po .PO .prg .PRG .prx .PRX .raw .RAW .residualvm .RESIDUALVM .rom .ROM .rzx .RZX .scl .SCL .scummvm .SCUMMVM .sg .SG .sgx .SGX .smd .SMD .sms .SMS .sna .SNA .st .ST .stx .STX .svm .SVM .swc .SWC .swf .SWF .szx .SZX .t64 .T64 .tap .TAP .trd .TRD .tzx .TZX .uae .UAE .udi .UDI .v64 .V64 .vb .VB .vec .VEC .ws .WS .wsc .WSC .x64 .X64 .xdf .XDF .xex .XEX .xfd .XFD .z .Z .z64 .Z64 .z80 .Z80 .znx .ZNX .nrg .NRG .mdf .MDF .iso .ISO .dat .DAT .bin .BIN .img .IMG .zip .ZIP .gz .GZ .7z .7Z'
    for i in $ROM_EXTENSION; do
        if [ -f "$ROM/${ROM_NAME%.*}$i" ]; then
            ROM="$ROM/${ROM_NAME%.*}$i"
            return 0
        fi
    done
    return 1
}

# Somente executa esta função se a rom estiver dentro de uma pasta.
if [ -d "$ROM" ]; then
    runInFolder
fi

################################################################################

### MANGOHUD (MOSTRA A UTILIZAÇÃO DO HARDWARE)

getOption showfps

if [ "${OPTION}" != 'auto' ]; then
    export MANGOHUD_CMD="${MANGOHUD_DIR}/mangohud --dlsym"

    case ${OPTION} in
        mangohud_default)
            export MANGOHUD=1
            export MANGOHUD_CONFIGFILE=${MANGOHUD_DIR}/profiles/default.conf
            ;;
        mangohud_graphic_info)
            export MANGOHUD=1
            export MANGOHUD_CONFIGFILE=${MANGOHUD_DIR}/profiles/graphic_info.conf
            ;;
        mangohud_smarty)
            export MANGOHUD=1
            export MANGOHUD_CONFIGFILE=${MANGOHUD_DIR}/profiles/smarty.conf
            ;;
        mangohud_basic)
            export MANGOHUD=1
            export MANGOHUD_CONFIGFILE=${MANGOHUD_DIR}/profiles/basic.conf
            ;;
        mangohud_more_info)
            export MANGOHUD=1
            export MANGOHUD_CONFIGFILE=${MANGOHUD_DIR}/profiles/more_info.conf
            ;;
        goverlay) #user-config
            export MANGOHUD=1
            if [ -f "${HOME}/.config/goverlay/MangoHud.conf" ]; then
                export MANGOHUD_CONFIGFILE="${HOME}/.config/goverlay/MangoHud.conf"
            elif [ -f "${HOME}/.config/MangoHud/MangoHud.conf" ]; then
                export MANGOHUD_CONFIGFILE="${HOME}/.config/MangoHud/MangoHud.conf"
            else
                export MANGOHUD_CONFIGFILE=${MANGOHUD_DIR}/profiles/default.conf
            fi
            ;;
        dxvk_hud)
            export MANGOHUD=2
            unset  MANGOHUD_CMD
            ;;
        *)
            echo "Mangohud: unknown option ${OPTION}"
            exit 1
    esac
fi

################################################################################

### VKBASALT (APLICA FILTROS DE IMAGEM EM JOGOS QUE USAM O VULKAN)

getOption vkbasalt

if [ "${OPTION}" != 'auto' ]; then
    export ENABLE_VKBASALT=1
    export VKBASALT_LOG_LEVEL=info
    export VKBASALT_LOG_FILE="${LOG_DIR}/vkBasalt.log"

    case ${OPTION} in
        default)
            export VKBASALT_CONFIG_FILE=${VKBASALT_DIR}/profiles/vkBasalt.conf.default
            ;;
        clarity)
            export VKBASALT_CONFIG_FILE=${VKBASALT_DIR}/profiles/vkBasalt.conf.clarity
            ;;
        fakehdr)
            export VKBASALT_CONFIG_FILE=${VKBASALT_DIR}/profiles/vkBasalt.conf.fakehdr
            ;;
        fakehdrv2)
            export VKBASALT_CONFIG_FILE=${VKBASALT_DIR}/profiles/vkBasalt.conf.fakehdrv2
            ;;
        gaussian)
            export VKBASALT_CONFIG_FILE=${VKBASALT_DIR}/profiles/vkBasalt.conf.gaussian
            ;;
        reshade)
            export VKBASALT_CONFIG_FILE=${VKBASALT_DIR}/profiles/vkBasalt.conf.reshade
            ;;
        user)
            # Carrega uma config "vkBasalt.conf" na pasta do jogo
            # caso não seja encontrado é carregado uma config em "${HOME}/.config/vkBasalt/vkBasalt.conf"
            # previamente criada no goverlay
            ;;
        *)
            echo "Vkbasalt: unknown option ${OPTION}"
            exit 1
    esac
fi

################################################################################

### ATIVA OU DESATIVA O PONTEIRO DO MOUSE

getOption mouse_pointer

if [ "${OPTION}" == 'on' ]; then
    mouse-pointer on
else
    mouse-pointer off
fi

################################################################################

### ATIVA O GLCORE PARA ALGUNS CORES

VIDEO_DRIVER='gl'

if [ "${EMULATOR}" == 'libretro' ]; then
    case ${CORE} in kronos|dolphin|ishiiruka|desmume)
        VIDEO_DRIVER=glcore
    esac
fi

if grep -q "^video_driver = \"${VIDEO_DRIVER}\"$" "${RETROARCH_CONF}"; then
    sed -i "s/^video_driver = .*/video_driver = \"${VIDEO_DRIVER}\"/" "${RETROARCH_CONF}"
else
    echo -ne "\nvideo_driver = \"${VIDEO_DRIVER}\"" >> "${RETROARCH_CONF}"
fi

unset VIDEO_DRIVER

################################################################################

### COPIA ARQUIVOS DE CONFIGURAÇÃO PADRÃO PARA A PRIMEIRA EXECUÇÃO DO RETROARCH

if ! [ -e "${RETROARCH_CONF}" ]; then
    cp -rf "${DATAINIT_DIR}/system/configs/retroarch" "$(dirname ${RETROARCH_CONF})"
fi

################################################################################

### LOAD SCREEN STOP

if [ "${LOADSCREEN}" == '1' ] && [ "$START_TIME" == "$(date +%s)" ]; then
    sleep 3
fi

################################################################################

### ARCADE

if [ "$SYSTEM" == 'arcade' ]; then
    case $CORE in
        mame)               SYSTEM='mame'   ;;
        mame0200)           SYSTEM='mame'   ;;
        mame0174)           SYSTEM='mame'   ;;
        mame0160)           SYSTEM='mame'   ;;
        mame0139)           SYSTEM='mame'   ;;
        mame078plus)        SYSTEM='mame'   ;;
        mame037)            SYSTEM='mame'   ;;
        hbmame)             SYSTEM='hbmame' ;;
        fbneo)              SYSTEM='fbneo'  ;;
        fbalpha2012)        SYSTEM='fbneo'  ;;
        fbalpha2012_cps1)   SYSTEM='fbneo'  ;;
        fbalpha2012_cps2)   SYSTEM='fbneo'  ;;
        fbalpha2012_cps3)   SYSTEM='fbneo'  ;;
        fbalpha2012_neogeo) SYSTEM='fbneo'  ;;
        flycast)            SYSTEM='naomi'  ;;
        flycast2019)        SYSTEM='naomi'  ;;
        *)                  SYSTEM='mame'   ;;
    esac
fi

################################################################################

### RAINE (EMULADOR DE NEOGEO CD)

if [ "${SYSTEM}" == 'neogeocd' ]; then
    if [ "${EMULATOR}" == 'raine' ] || [ "${EMULATOR}" == 'auto' ]; then
        xjoykiller /opt/Raine/killraine.sh "${P1INDEX}" "${P1GUID}"

        /opt/Raine/Raine.sh \
            "${ROM}"                                         \
            "${CORE}"                                        \
             $(test -z "${P1INDEX}" || echo -n "${P1INDEX}") \
             $(test -z "${P1GUID}"  || echo -n "${P1GUID}" ) \
             $(test -z "${P2INDEX}" || echo -n "${P2INDEX}") \
             $(test -z "${P2GUID}"  || echo -n "${P2GUID}" )

        xjoykiller --exit

        exit 0
    fi
fi

################################################################################

### DAPHNE

if [ "${SYSTEM}" == 'daphne' ]; then

    # Corrige o bug que cria diversas pastas adicionais dentro do diretório das
    # roms do daphne, as pastas extras serão direcionadas para a pasta de saves.
    # Este hack só funciona devido ao patch que modifica o arquivo
    # /usr/lib/python2.7/site-packages/configgen/batoceraFiles.py

    if ! [ -L "${SAVES_DIR}/daphne/roms" ]; then
        mkdir -p "${SAVES_DIR}/daphne"
        ln -sf "${ROMS_DIR}/daphne/roms" "${SAVES_DIR}/daphne/roms"
    fi
fi

################################################################################

### NINTENDO 64 DISK DRIVE (N64DD)

if [ "${SYSTEM}" == 'n64dd' ] || [ "${SYSTEM}" == 'n64' ]; then
    SLEEP='0'
    TIME='0.5'

    if ! [ -f "${RETROARCH_CORE_CONF}" ]; then
        mkdir -p "$(dirname "${RETROARCH_CORE_CONF}")"
        echo 'parallel-n64-gfxplugin = "auto"'          > "${RETROARCH_CORE_CONF}"
        echo 'parallel-n64-64dd-hardware = "disabled"' >> "${RETROARCH_CORE_CONF}"
        SLEEP="${TIME}"
    else
        if ! [ "$(grep '^parallel-n64-gfxplugin = ' "${RETROARCH_CORE_CONF}")" ]; then
            echo 'parallel-n64-gfxplugin = "auto"' >> "${RETROARCH_CORE_CONF}"
            SLEEP="${TIME}"
        fi

        if ! [ "$(grep '^parallel-n64-64dd-hardware = ' "${RETROARCH_CORE_CONF}")" ]; then
            echo 'parallel-n64-64dd-hardware = "disabled"' >> "${RETROARCH_CORE_CONF}"
            SLEEP="${TIME}"
        fi
    fi

    if [ "${SYSTEM}" == 'n64dd' ]; then
        if [ "${CORE}" == 'parallel' ] || [ "${CORE}" == 'auto' ]; then
            GFXPLUGIN="$(grep '^parallel-n64-gfxplugin = ' "${RETROARCH_CORE_CONF}" | cut -d '=' -f 2)"

            sed -i 's#parallel-n64-gfxplugin = .*#parallel-n64-gfxplugin = \"rice\"#' "${RETROARCH_CORE_CONF}"
            sed -i 's#parallel-n64-64dd-hardware = .*#parallel-n64-64dd-hardware = \"enabled\"#' "${RETROARCH_CORE_CONF}"

            SLEEP="${TIME}"

            sleep "$(echo "${SLEEP} + 1.0" | bc)" && sed -i "s#parallel-n64-gfxplugin = .*#parallel-n64-gfxplugin = ${GFXPLUGIN}#" "${RETROARCH_CORE_CONF}" &
            sleep "$(echo "${SLEEP} + 1.2" | bc)" && sed -i 's#parallel-n64-64dd-hardware = .*#parallel-n64-64dd-hardware = \"disabled\"#' "${RETROARCH_CORE_CONF}" &
        fi
    elif [ "${CORE}" == 'parallel' ]; then
        if [ "$(grep '^parallel-n64-64dd-hardware = \"enabled\"#' "${RETROARCH_CORE_CONF}")" ]; then 
            sed -i 's#parallel-n64-gfxplugin = .*#parallel-n64-gfxplugin = \"auto\"#' "${RETROARCH_CORE_CONF}"
            sed -i 's#parallel-n64-64dd-hardware = .*#parallel-n64-64dd-hardware = \"disabled\"#' "${RETROARCH_CORE_CONF}"
            SLEEP='1'
        fi
    fi

    if ! [ "${SLEEP}" == '0' ]; then
        sleep "${SLEEP}"
    fi
fi

################################################################################

### NINTENDO 64

# Descompacta a rom no formato .zip para o emulador mupen64plus.
# Este emulador só executa roms descompactadas.

if [ "$SYSTEM" == 'n64' ]; then
    if [ "$EMULATOR" == 'mupen64plus' ] || [ "$EMULATOR" == 'auto' ]; then

        ROM_NAME_FULL="$(basename "$ROM")"

        ROM_NAME="${ROM_NAME_FULL%.zip}"
        ROM_NAME="${ROM_NAME%.ZIP}"

        if [ "${ROM_NAME_FULL}" == "${ROM_NAME}.zip" ] || [ "$ROM_NAME_FULL" == "${ROM_NAME}.ZIP" ]; then

            ROM_DESCOMPACTADA='FALSE'

            while : ; do
                for j in .z64 .Z64 .n64 .N64 .v64 .V64; do
                    if [ -f "${EXTRACTIONS_DIR}/${ROM_NAME}${j}" ]; then
                        ROM="${EXTRACTIONS_DIR}/${ROM_NAME}${j}"
                        ROM_DESCOMPACTADA='TRUE'
                        break
                    fi
                done

                if [ "${ROM_DESCOMPACTADA}" == 'FALSE' ]; then
                    rm -r -f "${EXTRACTIONS_DIR}/"* 2> /dev/null
                    unzip "${ROM}" -d "${EXTRACTIONS_DIR}"
                else
                    break
                fi
            done

        fi
    fi
fi

################################################################################

### GAMECUBE E WII (DOLPHIN-EMU)

if [ "$SYSTEM" == 'gamecube' ] || [ "$SYSTEM" == 'wii' ]; then
    if [ "${EMULATOR}" == 'libretro' ]; then

        # ATIVA POR PADRÃO A EMULAÇÃO DE CONTROLE DO WII (DEITADO) NO DOLPHIN

        if [ "${SYSTEM}" == 'wii' ]; then
            WII_RMP_DIR="${SHARE}/system/.config/retroarch/config/remaps"

            if [ ! -f "${WII_RMP_DIR}/dolphin-emu/wii.rmp" ]; then
                mkdir -p "${WII_RMP_DIR}/dolphin-emu"
                for i in {1..4}; do
                    echo -e "input_libretro_device_p${i} = \"513\"\n"\
                            "input_player${i}_btn_up = \"7\"\n"\
                            "input_player${i}_btn_down = \"6\"\n"\
                            "input_player${i}_btn_left = \"4\"\n"\
                            "input_player${i}_btn_right = \"5\"\n"\
                            "input_player${i}_btn_b = \"1\"\n"\
                            "input_player${i}_btn_x = \"0\"\n"\
                            "input_player${i}_btn_y = \"9\"" >>"${WII_RMP_DIR}/dolphin-emu/wii.rmp"
                done
            fi

            # ATIVA POR PADRÃO A EMULAÇÃO DE CONTROLE DO WII (DEITADO) NO ISHIIRUKA

            if [ ! -f "${WII_RMP_DIR}/Ishiiruka/Ishiiruka.rmp" ]; then
                mkdir -p "${WII_RMP_DIR}/Ishiiruka"
                for i in {1..4}; do
                    echo -e "input_libretro_device_p${i} = \"513\"\n"\
                            "input_player${i}_btn_b = \"1\"\n"\
                            "input_player${i}_btn_x = \"0\"\n"\
                            "input_player${i}_btn_y = \"9\"" >>"${WII_RMP_DIR}/Ishiiruka/Ishiiruka.rmp"
                done
            fi
        fi

        # O core libretro do dolphin tem um bug que ao ser iniciado pela primeira vez
        # trava o PC, esta correção corrige este bug.
        # Remova este bloco de código quando o bug for corrido nos cores libretro.
        if [ "${SYSTEM}" == 'gamecube' ]; then
            if ! [ -f  "${SAVES_DIR}/gamecube/User/Config/Dolphin.ini" ]; then
                mkdir -p "${SAVES_DIR}/gamecube/User/Config"
                echo -e "[Analytics]\nID = 0\n" > "${SAVES_DIR}/gamecube/User/Config/Dolphin.ini"
            fi
        elif [ "${SYSTEM}" == 'wii' ]; then
            if ! [ -f  "${SAVES_DIR}/wii/User/Config/Dolphin.ini" ]; then
                mkdir -p "${SAVES_DIR}/wii/User/Config"
                echo -e "[Analytics]\nID = 0\n" > "${SAVES_DIR}/wii/User/Config/Dolphin.ini"
            fi
        fi
    else
        getOption fullboot
        FULLBOOT="${OPTION}"

        # VEJA O SCRIPT /usr/bin/dolphin-emu.sh
        export FULLBOOT
        export SYSTEM
        export ROM
        export BATOCERA_CONF
        export DOLPHIN_CFG="${SHARE}/system/configs/dolphin-emu/Dolphin.ini"
        export DOLPHIN_CFG_DIR="$(dirname "${DOLPHIN_CFG}")"

        if [ "${CORE}" == 'dolphin-user-config' ] || [ "${ROM}" == 'batocera.plus' ]; then
            export XDG_CONFIG_HOME="${DOLPHIN_CFG_DIR}"
        else
            export XDG_CONFIG_HOME="$(dirname "${DOLPHIN_CFG_DIR}")"
        fi
    fi
fi

################################################################################

### NINTENDO WIIU

if [ "$SYSTEM" == 'wiiu' ]; then
    xjoykiller /opt/Cemu/killcemu "${P1INDEX}" "${P1GUID}"

    getOption render
    RENDER="${OPTION}"

    getOption sync
    SYNC="${OPTION}"

    getOption intel
    INTEL="${OPTION}"

    # executa o cemu
    /opt/Cemu/Cemu.sh "${ROM}" "${RENDER}" "${SYNC}" "${INTEL}"

    xjoykiller --exit

    exit 0

fi

################################################################################

### NINTENDO SWITCH

if [ "${SYSTEM}" == 'switch' ]; then
   if [ "${CORE}" == 'publish' ]; then
        exec /opt/Ryujinx/ryujinx.sh "${ROM}" "${P1GUID}"
   else
        exec /opt/Yuzu/yuzu.sh "${ROM}" "${CORE}" "${P1GUID}"
   fi
fi

################################################################################

### MICROSOFT XBOX

if [ "$SYSTEM" == 'xbox' ]; then
    getOption videomode
    RESOLUTION="${OPTION}"
   
    getOption scaling
    SCALING="${OPTION}"

    getOption r_scale
    RSCALE="${OPTION}"

    getOption fullboot
    BOOTANIM="${OPTION}"

    # executa o xemu
    exec /opt/Xemu/xemu_launcher.sh \
        "${ROM}" \
        "${P1GUID}"     "${P2GUID}"  "${P3GUID}"   "${P4GUID}" \
        "${RESOLUTION}" "${SCALING}" "${BOOTANIM}" "${RSCALE}"
fi

################################################################################

### FUTURE PINBALL

if [ "$SYSTEM" == 'fpinball' ]; then
    getOption videomode
    RESOLUTION="${OPTION}"

    getOption ratio
    RATIO="${OPTION}"

    # executa o future pinball
    exec /opt/Future_Pinball/fpinball_launcher.sh \
        "${ROM}" "${RESOLUTION}" "${RATIO}" "${P1GUID}" "${P1NAME}"
fi

################################################################################

### VISUAL PINBALL

if [ "$SYSTEM" == 'vpinball' ]; then
    getOption videomode
    RESOLUTION="${OPTION}"

    getOption joypad
    CONTROLLER="${OPTION}"

    xjoykiller /opt/VisualPinball/killvpinball "${P1INDEX}" "${P1GUID}"

    # executa o visual pinball
    /opt/VisualPinball/vpinball.sh \
        "${ROM}" "${RESOLUTION}" "${CONTROLLER}" "${P1NAME}"

    xjoykiller --exit

    exit 0

fi

################################################################################

### SEGA MODEL2 EXPERIMENTAL

if [ "$SYSTEM" == 'model2' ]; then
    getOption videomode
    RESOLUTION="${OPTION}"

    getOption ratio
    WIDESCREEN="${OPTION}"

    getOption antialiasing
    ANTIALIASING="${OPTION}"

    getOption anisotropicfilter
    ANISOTROPICFILTER="${OPTION}"

    getOption vsync
    VSYNC="${OPTION}"

    getOption drawcross
    DRAWCROSS="${OPTION}"

    getOption rumble
    RUMBLE="${OPTION}"

    # Executa o Model 2
    exec /opt/Model2/Model2.sh \
        "${ROM}"          "${CORE}"  "${RESOLUTION}"        "${WIDESCREEN}" \
        "${ANTIALIASING}" "${VSYNC}" "${ANISOTROPICFILTER}" "${DRAWCROSS}" \
        "${RUMBLE}"       "${P1GUID}"
fi

################################################################################

### SEGA MODEL 3 EXPERIMENTAL

if [ "$SYSTEM" == 'model3' ]; then
    getOption videomode
    RESOLUTION="${OPTION}"

    getOption ratio
    WIDESCREEN="${OPTION}"

    getOption multitexture
    MULTITEXTURE="${OPTION}"

    getOption multithread
    MULTITHREAD="${OPTION}"

    getOption quadrendering
    QUADRENDERING="${OPTION}"

    getOption vsync
    VSYNC="${OPTION}"

    getOption new3dengine
    NEW3DENGINE="${OPTION}"

    getOption throttle
    THROTTLE="${OPTION}"

    getOption integerscale
    STRETCH="${OPTION}"

    getOption integerscale
    INTEGERSCALE="${OPTION}"

    getOption powerpcfrequency
    POWERPCFREQUENCY="${OPTION}"

    getOption rumble
    RUMBLE="${OPTION}"

    getOption emulatenet
    EMULATENET="${OPTION}"

    # Executa o Model 3
    exec /opt/Model3/Model3.sh \
        "${ROM}"              "${CORE}"        "${RESOLUTION}"    "${WIDESCREEN}" \
        "${MULTITEXTURE}"     "${MULTITHREAD}" "${QUADRENDERING}" "${VSYNC}" \
        "${NEW3DENGINE}"      "${THROTTLE}"    "${STRETCH}"       "${INTEGERSCALE}" \
        "${POWERPCFREQUENCY}" "${RUMBLE}"      "${EMULATENET}"    "${P1GUID}"
fi

################################################################################

### PLAYSTATION 2

if [ "${SYSTEM}" == 'ps2' ]; then
    if [ "${EMULATOR}" == 'pcsx2' ] || [ "${EMULATOR}" == 'auto' ]; then
        case "${CORE}" in
            pcsx2)
                # Cria pastas adicionais.
                /opt/Pcsx2/pcsx2.sh populate

                # Corrige bug com o MangoHud
                export LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:/lib32"
                ;;
            pcsx2-mainline|pcsx2-legacy|auto)
                getOption ratio
                RATIO="${OPTION}"

                getOption videomode
                VIDEOMODE="${OPTION}"

                getOption fullboot
                FULLBOOT="${OPTION}"

                getOption internal_resolution
                INTERNALRESOLUTION="${OPTION}"

                getOption anisotropic_filtering
                ANISOTROPIC_FILTERING="${OPTION}"

                getOption vsync
                VSYNC="${OPTION}"

                getOption wscrh
                WSCRH="${OPTION}"

                getOption speedhacks
                SPEEDHACKS="${OPTION}"

                getOption custom
                CUSTOM="${OPTION}"

                getOption api
                API="${OPTION}"

                xjoykiller /opt/Pcsx2/killpcsx2.sh "${P1INDEX}" "${P1GUID}"

                /opt/Pcsx2/pcsx2.sh \
                    "${CORE}"               "${P1GUID}"                "${ROM}" \
                    "${RATIO}"              "${VIDEOMODE}"             "${FULLBOOT}" \
                    "${INTERNALRESOLUTION}" "${ANISOTROPIC_FILTERING}" "${VSYNC}" \
                    "${WSCRH}"              "${SPEEDHACKS}"            "${CUSTOM}" \
                    "${API}"

                xjoykiller --exit

                exit 0
                ;;
        esac
    fi
fi

################################################################################

### PLAYSTATION 3

if [ "$SYSTEM" == 'ps3' ]; then

    if [ ! -d "${SAVES_DIR}/ps3" ] || [ ! "$(ls -l "${HOME}/configs/rpcs3" 2> /dev/null)" ]; then
        mkdir -p "${SAVES_DIR}/saves/ps3/GuiConfigs"
        ln -sf "${SAVES_DIR}/saves/ps3" "${HOME}/configs/rpcs3"
    fi

    if [ "${CORE}" == 'rpcs3-mainline' ]; then
        xjoykiller /opt/Rpcs3/killrpcs3 "${P1INDEX}" "${P1GUID}"
        /opt/Rpcs3/rpcs3.sh "${ROM}"
        xjoykiller --exit
        exit 0
    elif [ ! "$(ls -A "${HOME}/configs/rpcs3/dev_flash/vsh/etc" 2> /dev/null)" ] && [ "${CORE}" != 'rpcs3-mainline' ]; then
        /usr/bin/batocera-config-rpcs3 '--firmware'
    fi

fi

################################################################################

### NINTENDO 3DS

if [ "${SYSTEM}" == '3ds' ]; then
    if [ "${EMULATOR}" == 'citra' ] || [ "${EMULATOR}" == 'auto' ]; then
        getOption mouse_pointer

        if [ "${OPTION}" == 'auto' ]; then
            mouse-pointer on
        fi
    fi

    # Mii Data para o citra
    if ! [ -d "${SAVES_DIR}/3ds/citra-emu" ]; then
        mkdir -p "${SAVES_DIR}/3ds"
        cp -r "${BIOS_DIR}/citra" "${SAVES_DIR}/3ds/citra-emu"
    fi

    if ! [ -e "${SAVES_DIR}/3ds/Citra" ]; then
        ln -s "${SAVES_DIR}/3ds/citra-emu" "${SAVES_DIR}/3ds/Citra"
    fi
fi

################################################################################

### PSX LIBRETRO DUCKSTATION

function unPbp() {
    local ROM_NAME="$(basename "${ROM}")"

    ### Verifica se a rom já está descompactada.
    if [ -f "${EXTRACTIONS_DIR}/${ROM_NAME}.img" ]; then
        return 0
    fi

    ### Limpa a pasta temporária de descompactação.
    if [ "$(ls ${EXTRACTIONS_DIR})" ]; then
        rm -r "${EXTRACTIONS_DIR}/"*
    fi

    ### Extende o tempo da tela de carregamento enquanto a rom é descompactada.
    if [ "${LOADSCREEN}" == '1' ]; then
        sleep 3
        # Existem jogos que descompactam em menos de 3 segundos.
        if [ "$(pidof popstationr)" ]; then
            batocera-load-screen -i '/etc/emulationstation/themes/batocera-plus/loadscreen/loadscreen.png'
        fi
    fi &

    ### Descompacta a rom.
    popstationr -iso "${EXTRACTIONS_DIR}/${ROM_NAME}.img" "${ROM}"

    if [ "${?}" == '0' ] && [ -f "${EXTRACTIONS_DIR}/${ROM_NAME}.img" ]; then
        return 0
    fi

    return 1
}

function updateBatoceraConf() {
    local ROM_OPTION="$(grep -F "psx[\"$(basename "${ROM}"\"].)" "${BATOCERA_CONF}" | sed 's|.PBP"].|.PBP.img"].|g')"

    if [ -z "${ROM_OPTION}" ]; then
        return 0
    fi

    local ROM_NAME_ESC=$(sed 's/[^^]/[&]/g; s/\^/\\^/g' <<< "$(basename "${ROM}")")

    sed -i "/${ROM_NAME_ESC}.img$/d" "${BATOCERA_CONF}"
    echo "${ROM_OPTION}" >> "${BATOCERA_CONF}"
}

if [ "${SYSTEM}" == 'psx' ]; then
    if [ "${EMULATOR}" == 'libretro' ] && [ "${CORE}" == 'duckstation' ]; then
        if [ "${ROM%.pbp}.pbp" == "${ROM%}" ] || [ "${ROM%.PBP}.PBP" == "${ROM%}" ]; then
            unPbp || exit 1
            updateBatoceraConf
            ROM="${EXTRACTIONS_DIR}/$(basename "${ROM}").img"
        fi
    fi
fi

################################################################################

### SONY PSP

if [ "${SYSTEM}" == 'psp' ] || [ "${SYSTEM}" == 'pspminis' ]; then
    # Suporte à DLCs.
    if [ "${SYSTEM}" == 'psp' ]; then
        if [ -e "${ROMS_DIR}/psp/DLC.PSN" ] && [ ! -e "${SAVES_DIR}/psp/PSP/GAME" ]; then
            mkdir -p "${SAVES_DIR}/psp/PSP"
            ln -sf "${ROMS_DIR}/psp/DLC.PSN" "${SAVES_DIR}/psp/PSP/GAME"
        fi
    fi

    # Fontes extras para o PPSSPP standalone.
    if [ -e "${BIOS_DIR}/PPSSPP/flash0/font" ] && [ ! -L "${HOME}/configs/ppsspp/PSP/flash0/font" ]; then
        if [ -e "${HOME}/configs/ppsspp/PSP/flash0/font" ]; then
            rm -r "${HOME}/configs/ppsspp/PSP/flash0/font"
        fi

        mkdir -p "${HOME}/configs/ppsspp/PSP/flash0"
        ln -s "${BIOS_DIR}/PPSSPP/flash0/font" "${HOME}/configs/ppsspp/PSP/flash0/font"
    fi
fi

#################################################################################

### MSDOS

if [ "${SYSTEM}" == 'dos' ]; then
    getOption mouse_pointer

    if [ "${OPTION}" == 'auto' ]; then
        mouse-pointer on
    fi
fi

#################################################################################

### LINUX

if [ "$SYSTEM" == 'linux' ]; then
    # Carrega o jogo de uma pasta.
    if [ -d "$ROM" ]; then
        cd "$ROM"
        if ! [ -x ./batocera.plus ]; then
            chmod +x ./batocera.plus
        fi
        ./batocera.plus $@;
    elif [ -f "${ROM%plus}plus" ] || [ -f "${ROM%PLUS}PLUS" ]; then
        # Carrega o jogo compactado no formato squashfs.
        if mount "$ROM" "${EXTRACTIONS_DIR}"; then
            cd "${EXTRACTIONS_DIR}"
            ./batocera.plus $@;
            cd ..
            sleep 0.5
            umount -f "${EXTRACTIONS_DIR}"
        fi
    fi
    exit $?
fi

################################################################################

### WINDOWS

if [ "${SYSTEM}" == 'windows' ] || [ "${SYSTEM}" == 'mugen' ]; then
    getOption script
    SCRIPT="${OPTION}"

    getOption sync
    SYNC="${OPTION}"

    getOption directx
    DIRECTX="${OPTION}"

    getOption optimizations
    OPTIMIZATIONS="${OPTION}"

    getOption ingame_videos
    INGAME_VIDEOS="${OPTION}"

    getOption joypad
    JOYPAD="${OPTION}"

    getOption videomode
    VIDEOMODE="${OPTION}"

    getOption wine_legacy
    WINE_LEGACY="${OPTION}"

    exec /opt/Wine/wine-emulationstation.sh \
        "${SYSTEM}"    "${EMULATOR}"      "${CORE}"          "${ROM}" \
        "${P1GUID}"    "${SHARE}"         "${SAVES_DIR}"     "${EXTRACTIONS_DIR}" \
        "${LOG_DIR}"   "${SCRIPT}"        "${SYNC}"          "${DIRECTX}" \
        "${MANGOHUD}"  "${OPTIMIZATIONS}" "${INGAME_VIDEOS}" "${JOYPAD}" \
        "${VIDEOMODE}" "${WINE_LEGACY}"
fi

################################################################################

### OPENBOR

if [ "$SYSTEM" == 'openbor' ]; then
    exec /opt/OpenBOR/OpenBOR.sh "$CORE" "$ROM"
fi

################################################################################

### INTERNET

if [ "${SYSTEM}" == 'internet' ]; then
    xjoykiller /opt/Firefox/killfirefox.sh "${P1INDEX}" "${P1GUID}"
    /opt/Firefox/firefox.sh "${SYSTEM}" "${ROM}"
    xjoykiller --exit
    exit 0
fi

################################################################################

### FLASH

if [ "${SYSTEM}" == 'flash' ]; then
    getOption mouse_pointer

    if [ "${OPTION}" == 'auto' ]; then
        mouse-pointer on
    fi

    xjoykiller /opt/Firefox/killfirefox.sh "${P1INDEX}" "${P1GUID}"
    /opt/Firefox/firefox-flash.sh "${ROM}"
    xjoykiller --exit
    exit 0
fi

################################################################################

### MAME

#if [ "$SYSTEM" == 'mame' ]; then
#    ln -sf '/usr/share/batocera/datainit/decorations/default/systems/mame2.png' '/usr/share/batocera/datainit/decorations/default/systems/mame.png'
#fi

################################################################################

### SNES - MESS

#if [ "$SYSTEM" == 'snes' ] && [ "$CORE" == 'mess' ]; then
#    ### Adiciona parametros extras para o mess.
#    ### Agrascimentos a "Sérgio De Carvalho Júnior" pelos parametros.#
#
#    ROM="snes -rompath /userdata/roms/mame -cart \\\"$ROM\\\""
#    SYSTEM='mame'
#    CORE='mame'
#
#    ### Força a ativação do boot_from_cli
#
#    CORE_CFG="$HOME/configs/retroarch/cores/retroarch-core-options.cfg"
#    if ! [ -f "$CORE_CFG" ]; then
#        mkdir -p "$(dirname "$CORE_CFG")"
#        echo 'mame_boot_from_cli = "enabled"' > "$CORE_CFG"
#    elif [ "$(grep 'mame_boot_from_cli' "$CORE_CFG" )" ]; then
#        sed -i 's/^mame_boot_from_cli.*/mame_boot_from_cli = "enabled"/' "$CORE_CFG"
#    else
#        echo 'mame_boot_from_cli = "enabled"' > "$CORE_CFG"
#    fi
#
#    # Saves
#    rm -r    "/userdata/saves/mame/mame/nvram/snes"
#    mkdir -p '/userdata/saves/snes'
#    ln -sf   '/userdata/saves/snes' '/userdata/saves/mame/mame/nvram/snes'
#
#    ### Decorações de Janela
#    ln -sf '/usr/share/batocera/datainit/decorations/default/systems/snes.png' '/usr/share/batocera/datainit/decorations/default/systems/mame.png'
#
#    sleep 0.2
#fi

################################################################################

### J2ME

if [ "${SYSTEM}" == 'j2me' ]; then
    PATH="${PATH}:${JAVA_HOME}/bin"
    CLASSPATH="${JAVA_HOME}/lib/tools.jar"
    CLASSPATH=".:${CLASSPATH}"
    export JAVA_HOME PATH CLASSPATH

    if [ "${EMULATOR}" == 'freej2me' ] || [ "${EMULATOR}" == 'auto' ]; then
        exec /opt/Freej2me/freej2me.sh "${ROM}"
    fi
fi

################################################################################

### EXECUTA A ROM

EXEC_EMU="$(
    echo -n 'python /usr/lib/python2.7/site-packages/configgen/emulatorlauncher.py'

    test -z "$P1INDEX"      || echo -n ' -p1index '      "$P1INDEX"
    test -z "$P1GUID"       || echo -n ' -p1guid '       "$P1GUID"
    test -z "$P1NAME"       || echo -n ' -p1name '     "\"$P1NAME\""
    test -z "$P1NBBUTTONS"  || echo -n ' -p1nbbuttons '  "$P1NBBUTTONS"
    test -z "$P1NBHATS"     || echo -n ' -p1nbhats '     "$P1NBHATS"
    test -z "$P1NBAXES"     || echo -n ' -p1nbaxes '     "$P1NBAXES"
    test -z "$P1DEVICEPATH" || echo -n ' -p1devicepath ' "$P1DEVICEPATH"

    test -z "$P2INDEX"      || echo -n ' -p2index '      "$P2INDEX"
    test -z "$P2GUID"       || echo -n ' -p2guid '       "$P2GUID"
    test -z "$P2NAME"       || echo -n ' -p2name '     "\"$P2NAME\""
    test -z "$P2NBBUTTONS"  || echo -n ' -p2nbbuttons '  "$P2NBBUTTONS"
    test -z "$P2NBHATS"     || echo -n ' -p2nbhats '     "$P2NBHATS"
    test -z "$P2NBAXES"     || echo -n ' -p2nbaxes '     "$P2NBAXES"
    test -z "$P2DEVICEPATH" || echo -n ' -p2devicepath ' "$P2DEVICEPATH"

    test -z "$P3INDEX"      || echo -n ' -p3index '      "$P3INDEX"
    test -z "$P3GUID"       || echo -n ' -p3guid '       "$P3GUID"
    test -z "$P3NAME"       || echo -n ' -p3name '     "\"$P3NAME\""
    test -z "$P3NBBUTTONS"  || echo -n ' -p3nbbuttons '  "$P3NBBUTTONS"
    test -z "$P3NBHATS"     || echo -n ' -p3nbhats '     "$P3NBHATS"
    test -z "$P3NBAXES"     || echo -n ' -p3nbaxes '     "$P3NBAXES"
    test -z "$P3DEVICEPATH" || echo -n ' -p3devicepath ' "$P3DEVICEPATH"

    test -z "$P4INDEX"      || echo -n ' -p4index '      "$P4INDEX"
    test -z "$P4GUID"       || echo -n ' -p4guid '       "$P4GUID"
    test -z "$P4NAME"       || echo -n ' -p4name '     "\"$P4NAME\""
    test -z "$P4NBBUTTONS"  || echo -n ' -p4nbbuttons '  "$P4NBBUTTONS"
    test -z "$P4NBHATS"     || echo -n ' -p4nbhats '     "$P4NBHATS"
    test -z "$P4NBAXES"     || echo -n ' -p4nbaxes '     "$P4NBAXES"
    test -z "$P4DEVICEPATH" || echo -n ' -p4devicepath ' "$P4DEVICEPATH"

    test -z "$P5INDEX"      || echo -n ' -p5index '      "$P5INDEX"
    test -z "$P5GUID"       || echo -n ' -p5guid '       "$P5GUID"
    test -z "$P5NAME"       || echo -n ' -p5name '     "\"$P5NAME\""
    test -z "$P5NBBUTTONS"  || echo -n ' -p5nbbuttons '  "$P5NBBUTTONS"
    test -z "$P5NBHATS"     || echo -n ' -p5nbhats '     "$P5NBHATS"
    test -z "$P5NBAXES"     || echo -n ' -p5nbaxes '     "$P5NBAXES"
    test -z "$P5DEVICEPATH" || echo -n ' -p5devicepath ' "$P5DEVICEPATH"

    test -z "$P6INDEX"      || echo -n ' -p6index '      "$P6INDEX"
    test -z "$P6GUID"       || echo -n ' -p6guid '       "$P6GUID"
    test -z "$P6NAME"       || echo -n ' -p6name '     "\"$P6NAME\""
    test -z "$P6NBBUTTONS"  || echo -n ' -p6nbbuttons '  "$P6NBBUTTONS"
    test -z "$P6NBHATS"     || echo -n ' -p6nbhats '     "$P6NBHATS"
    test -z "$P6NBAXES"     || echo -n ' -p6nbaxes '     "$P6NBAXES"
    test -z "$P6DEVICEPATH" || echo -n ' -p6devicepath ' "$P6DEVICEPATH"

    test -z "$P7INDEX"      || echo -n ' -p7index '      "$P7INDEX"
    test -z "$P7GUID"       || echo -n ' -p7guid '       "$P7GUID"
    test -z "$P7NAME"       || echo -n ' -p7name '     "\"$P7NAME\""
    test -z "$P7NBBUTTONS"  || echo -n ' -p7nbbuttons '  "$P7NBBUTTONS"
    test -z "$P7NBHATS"     || echo -n ' -p7nbhats '     "$P7NBHATS"
    test -z "$P7NBAXES"     || echo -n ' -p7nbaxes '     "$P7NBAXES"
    test -z "$P7DEVICEPATH" || echo -n ' -p7devicepath ' "$P7DEVICEPATH"

    test -z "$P8INDEX"      || echo -n ' -p8index '      "$P8INDEX"
    test -z "$P8GUID"       || echo -n ' -p8guid '       "$P8GUID"
    test -z "$P8NAME"       || echo -n ' -p8name '     "\"$P8NAME\""
    test -z "$P8NBBUTTONS"  || echo -n ' -p8nbbuttons '  "$P8NBBUTTONS"
    test -z "$P8NBHATS"     || echo -n ' -p8nbhats '     "$P8NBHATS"
    test -z "$P8NBAXES"     || echo -n ' -p8nbaxes '     "$P8NBAXES"
    test -z "$P8DEVICEPATH" || echo -n ' -p8devicepath ' "$P8DEVICEPATH"

    test -z "$SYSTEM"       || echo -n ' -system '       "$SYSTEM"
    test -z "$ROM"          || echo -n ' -rom '        "\"$ROM\""
)"

echo "$EXEC_EMU" > "${LOG_DIR}/es_launch_plus.log"

exec /bin/sh -c "${MANGOHUD_CMD} ${EXEC_EMU}"

################################################################################
