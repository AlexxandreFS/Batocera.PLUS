#!/bin/sh
################################################################################
### BATOCERA.PLUS
### Alexandre Freire dos Santos
### alexxandre.freire@gmail.com
################################################################################

SHARE='/userdata'
BIOS_DIR="$SHARE/bios"
SAVES_DIR="$SHARE/saves"
ROMS_DIR="$SHARE/roms"
EXTRACTIONS_DIR="$SHARE/extractions"

BATOCERA_CONF="$HOME/batocera.conf"

mouse-pointer off

################################################################################

### CAPTURA DE PARAMETROS.

P1INDEX=''; P1GUID=''; P1NAME=''  ; P1NBAXES=''; P1DEVICEPATH=''
P2INDEX=''; P2GUID=''; P2NAME=''  ; P2NBAXES=''; P2DEVICEPATH=''
P3INDEX=''; P3GUID=''; P3NAME=''  ; P3NBAXES=''; P3DEVICEPATH=''
P4INDEX=''; P4GUID=''; P4NAME=''  ; P4NBAXES=''; P4DEVICEPATH=''
P5INDEX=''; P5GUID=''; P5NAME=''  ; P5NBAXES=''; P5DEVICEPATH=''
SYSTEM='' ; ROM=''   ; EMULATOR=''; CORE=''

FOUND=''

for i in "$@"; do
    if [ "$FOUND" == '' ]; then
        case "$i" in
            -p1index|-p1guid|-p1name  |-p1nbaxes|-p1devicepath| \
            -p2index|-p2guid|-p2name  |-p2nbaxes|-p2devicepath| \
            -p3index|-p3guid|-p3name  |-p3nbaxes|-p3devicepath| \
            -p4index|-p4guid|-p4name  |-p4nbaxes|-p4devicepath| \
            -p5index|-p5guid|-p5name  |-p5nbaxes|-p5devicepath| \
            -system |-rom)
                FOUND="$i"
	        ;;
	esac
    else
        case "$FOUND" in
	    -p1index)      P1INDEX="$i"      ;;
	    -p1guid)       P1GUID="$i"       ;;
	    -p1name)       P1NAME="$i"       ;;
	    -p1nbaxes)     P1NBAXES="$i"     ;;
	    -p1devicepath) P1DEVICEPATH="$i" ;;
	    -p2index)      P2INDEX="$i"      ;;
	    -p2guid)       P2GUID="$i"       ;;
	    -p2name)       P2NAME="$i"       ;;
	    -p2nbaxes)     P2NBAXES="$i"     ;;
	    -p2devicepath) P2DEVICEPATH="$i" ;;
	    -p3index)      P3INDEX="$i"      ;;
	    -p3guid)       P3GUID="$i"       ;;
	    -p3name)       P3NAME="$i"       ;;
	    -p3nbaxes)     P3NBAXES="$i"     ;;
	    -p3devicepath) P3DEVICEPATH="$i" ;;
	    -p4index)      P4INDEX="$i"      ;;
	    -p4guid)       P4GUID="$i"       ;;
	    -p4name)       P4NAME="$i"       ;;
	    -p4nbaxes)     P4NBAXES="$i"     ;;
	    -p4devicepath) P4DEVICEPATH="$i" ;;
	    -p5index)      P5INDEX="$i"      ;;
	    -p5guid)       P5GUID="$i"       ;;
	    -p5name)       P5NAME="$i"       ;;
	    -p5nbaxes)     P5NBAXES="$i"     ;;
	    -p5devicepath) P5DEVICEPATH="$i" ;;
	    -system)       SYSTEM="$i"       ;;
	    -rom)          ROM="$i"          ;;
        esac

        FOUND=''
    fi
done

################################################################################

### DEFAULT EMULATOR and CORE

# Antigamente o emulationstaion enviava a variavel CORE e o SYSTEM quando o jogo
# era executado, mas nas versões novas ele não faz mais isso, ele salva estas
# informações no arquivo batocera.conf e o configgen busca por estas informações
# neste arquivo.
# Este trexo de código faz a leitura do arquivo batocera.conf e caso encontre
# informações referentes ao CORE e o SYSTEM ele adiciona nestas variáveis para
# serem usadas neste script, caso não exista estas informações ele define estas
# variáveis como "auto".
#sed -i "s#^$(basename "${ROM}")#$(basename "${SYSTEM}").$(basename "${ROM}")#g" "$BATOCERA_CONF"

EMULATOR="$(grep -F "[\"$(basename "${ROM}")\"].emulator" "$BATOCERA_CONF" | cut -d '=' -f 2)"
if [ ! "$EMULATOR" ] || [ "$EMULATOR" == 'auto' ]; then
    EMULATOR="$(grep "${SYSTEM}.emulator" "$BATOCERA_CONF" | cut -d '=' -f 2)"
    if [ ! "$EMULATOR" ]; then
        EMULATOR='auto'
    fi
fi

CORE="$(grep -F "[\"$(basename "${ROM}")\"].core" "$BATOCERA_CONF" | cut -d '=' -f 2)"
if [ ! "$CORE" ] || [ "$CORE" == 'auto' ]; then
    CORE="$(grep "${SYSTEM}.core" "$BATOCERA_CONF" | cut -d '=' -f 2)"
    if ! [ "$CORE" ]; then
        CORE='auto'
    fi
fi

################################################################################

### LOAD SCREEN START

# Define o nome do tema.
if [ -f "$SHARE/system/configs/emulationstation/es_settings.cfg" ]; then
    THEME_NAME="$(cat "$SHARE/system/configs/emulationstation/es_settings.cfg" | grep '<string name="ThemeSet" value=' | cut -d '"' -f 4)"
    if ! [ "$THEME_NAME" ]; then
        THEME_NAME='batocera-plus'
    fi
else
    THEME_NAME='batocera-plus'
fi

# Define diretorio do tema.
if [ -d "$SHARE/themes/$THEME_NAME" ]; then
    THEME_DIR="$SHARE/themes/$THEME_NAME"
elif [ -d "/etc/emulationstation/themes/$THEME_NAME" ]; then
    THEME_DIR="/etc/emulationstation/themes/$THEME_NAME"
else
    THEME_DIR="/etc/emulationstation/themes/batocera-plus"
fi

# Define o nome da imagem de carregamento.
if [ -f "$THEME_DIR/loadscreen/$SYSTEM.png" ]; then
    IMG_NAME="$THEME_DIR/loadscreen/$SYSTEM.png"
elif [ -f "$THEME_DIR/loadscreen/$SYSTEM.jpg" ]; then
    IMG_NAME="$THEME_DIR/loadscreen/$SYSTEM.jpg"
elif [ -f '/etc/emulationstation/themes/batocera-plus/loadscreen/loadscreen.png' ]; then
    IMG_NAME='/etc/emulationstation/themes/batocera-plus/loadscreen/loadscreen.png'
elif [ -f '/etc/emulationstation/themes/batocera-plus/loadscreen/loadscreen.jpg' ]; then
    IMG_NAME='/etc/emulationstation/themes/batocera-plus/loadscreen/loadscreen.jpg'
fi

# Exibe a tela de carregamento.
retroarch -L '/usr/lib/libretro/imageviewer_libretro.so' \
          --config '/usr/share/batocera/datainit/system/configs/retroarch/retroarchcustom.cfg' \
          "$IMG_NAME" &

START_TIME="$(date +%s)"

################################################################################

### CONFIGURA A ROM PARA SER EXECUTADA POR ARQUIVO DE TEXTO.
### Útil para usar as roms de um sistema em outro sem duplicar arquivos.

if ! [ -d "$ROM" ]; then
    if [ "$(ls -l "$ROM" | awk '{print $5}')" -lt 33 ]; then
        ROM_TXT="$(head -n 1 "$ROM")"
        if [ "$(echo "$ROM_TXT" | grep '^#')" ]; then
            ROM_NAME="$(basename "$ROM")"
            ROM_DIR="$(dirname "$ROM")"
            ROM_SYS="$(echo "$ROM_TXT" | grep '^#' | cut -d '#' -f 2-)"
            ROM_NEW="$(dirname "$ROM_DIR")"
            ROM="$ROM_NEW/$ROM_SYS/$ROM_NAME"
        fi
    fi
fi

################################################################################

### DESCOMPACTA ROM NO FORMATO DO 7ZIP

function un7zip() {

    ### Pega o nome da rom sem a extenção.
    ### Somente executa o script para arquivos compactados pelo 7zip.
    ROM_DIR="$(dirname  "$ROM")"
    if [ -f "$ROM_DIR/$(basename "$ROM" 7z)7z" ]; then
        local ROM_FILE="$(basename "$ROM" .7z)"
        local ROM_EXT='7z'
    elif [ -f "$ROMDIR/$(basename "$ROM" 7Z)7Z" ]; then
        local ROM_FILE="$(basename "$ROM" .7Z)"
        local ROM_EXT='7Z'
    else
        return 0
    fi

    ### Procura por arquivo principal da rom (.cue .ccd .lst etc...)
    ### no diretório de roms descompactadas.
    for ((i = 0; i != 2; i++)); do
        for j in $1; do
            if [ -d "$EXTRACTIONS_DIR/$ROM_FILE" ]; then
                if [ -f "$EXTRACTIONS_DIR/$ROM_FILE/$ROM_FILE$j" ]; then
                    # Quando um core alternativo é escolhido para uma rom no formato 7z
                    # o emulationstation salva no arquivo batocera.conf o nome da rom com a exteção 7z ou 7Z
                    # como a rom vai ser descompactada é preciso mudar a exteção da rom no arquivo batocera.conf
                    # para o formato descompactado (cue, ccd, iso, etc...)
                    # Dependendo do nome da rom ela pode ter caracteres especiais, a finalidade deste código é
                    # usar caracteres de escape para permitir que ela seja usada no comando sed.
                    for i in "$(grep -F "$(basename "$ROM")" "$BATOCERA_CONF" | sed "s/.$ROM_EXT./$j\"/")"; do
                        local ROM_NAME_ESC=$(sed 's/[^^]/[&]/g; s/\^/\\^/g' <<< "${ROM_FILE}$j")
                        sed -i "/$ROM_NAME_ESC/d" "$BATOCERA_CONF"
                        echo "$i" >> "$BATOCERA_CONF"
                    done
                    ROM="$EXTRACTIONS_DIR/$ROM_FILE/$ROM_FILE$j"
                    return 0
                fi
            elif [ -f "$EXTRACTIONS_DIR/$ROM_FILE$j" ]; then
                    for i in "$(grep -F "$(basename "$ROM")" "$BATOCERA_CONF" | sed "s/.$ROM_EXT./$j\"/")"; do
                        local ROM_NAME_ESC=$(sed 's/[^^]/[&]/g; s/\^/\\^/g' <<< "${ROM_FILE}$j")
                        sed -i "/$ROM_NAME_ESC/d" "$BATOCERA_CONF"
                        echo "$i" >> "$BATOCERA_CONF"
                    done
                ROM="$EXTRACTIONS_DIR/$ROM_FILE$j"
                return 0
            fi
        done

        ### Evita que a ISO seja descompactada duas vezes.
        ### Isso acontece quando a rom está em um formato não aceito.
        if (( $i > 0 )); then
            return 1
        fi

        ### Limpa a pasta temporária de descompactação.
        if [ "$(ls $EXTRACTIONS_DIR)" ]; then
            rm -r "$EXTRACTIONS_DIR/"*
        fi

        ### Descompacta a rom.
        7zr x "$ROM" "-o$EXTRACTIONS_DIR" -bb0
    done
}

case $SYSTEM in
    3do)        un7zip '.cue .CUE .iso .ISO .bin .BIN .chd .CHD' ;;
    psx)        un7zip '.ccd .CCD .cue .CUE .mdf .MDF .chd .CHD .cbn .CBN .m3u .M3U .pbp .PBP .toc .TOC .iso .ISO .bin .BIN .img .IMG' ;;
    psxmini)    un7zip '.ccd .CCD .cue .CUE .mdf .MDF .chd .CHD .cbn .CBN .m3u .M3U .pbp .PBP .toc .TOC .iso .ISO .bin .BIN .img .IMG' ;;
    psp)        un7zip '.iso .ISO .cso .CSO .pbp .PBP' ;;
    pspminis)   un7zip '.iso .ISO .cso .CSO .pbp .PBP' ;;
    ps2)        un7zip '.mdf .MDF .iso .ISO .nrg .NRG .bin .BIN .img .IMG .dump .DUMP .cso .CSO .gz .GZ' ;;
    gamecube)   un7zip '.ciso .CISO .iso .ISO .gc .GC .gcz .GCZ .wbfs .WBFS .gcm .GCM' ;;
    wii)        un7zip '.iso .ISO .wbfs .WBFS .dol .DOL .gcm .GCM .ciso .CISO .gcz .GCZ .wad .WAD' ;;
    3ds)        un7zip '.3ds .3DS .3dsx .3DSX .elf .ELF .axf .AXF .cci .CCI .cxi .CXI .app .APP' ;;
    segacd)     un7zip '.cue .CUE .chd .CHD .iso .ISO' ;;
    saturn)     un7zip '.ccd .CCD .cue .CUE .chd .CHD .iso .ISO .bin .BIN' ;;
    dreamcast)  un7zip '.cdi .CDI .gdi .GDI .chd .CHD' ;;
    naomi)      un7zip '.lst .LST .bin .BIN .dat .DAT' ;;
    neogeocd)   un7zip '.cue .CUE .chd .CHD .iso .ISO' ;;
    atomiswave) un7zip '.lst .LST .bin .BIN .dat .DAT' ;;
    naomi)      un7zip '.lst .LST .bin .BIN .dat .DAT' ;;
    arcade)     un7zip '.lst .LST .bin .BIN .dat .DAT .fba .FBA' ;;
    snescd)     un7zip '.smc .SMC .sfc .SFC' ;;
    n64)        un7zip '.z64 .Z64 .n64 .N64 .v64 .V64' ;;
    n64dd)      un7zip '.z64 .Z64 .n64 .N64 .v64 .V64 .ndd .NDD' ;;
    amigacd32)  un7zip '.cue .CUE .lha .LHA .iso .ISO ' ;;
    pcenginecd) un7zip '.cue .CUE .ccd .CCD .iso .ISO .bin .BIN .img .IMG' ;;
    jaguar)     un7zip '.ccd .CCD .cue .CUE .iso .ISO .bin .BIN' ;;
esac

################################################################################

### EXECUTA A ROM DENTRO DE UMA PASTA

function runInFolder {

    # Ignora sistemas que utilizam roms dentro de pastas nativamente como por
    # exemplo  msdos windows e linux 
    case "$SYSTEM" in
        dos|windows|linux|daphne) return 0 ;;
    esac

    # Verifica se o nome do arquivo principal da rom (.cue .iso) tem o mesmo
    # nome e extensão da pasta com a rom, se tiver configura para executar a
    # rom sem tentar adivinhar a sua extensão.
    ROM_NAME="$(basename "$ROM")"
    if [ -f "$ROM/$ROM_NAME" ]; then
        ROM="$ROM/$ROM_NAME"
        return 0
    fi

    # Tenta adivinhar a extensão do arquivo principal da rom.
    ROM_EXTENSION='.ccd .CCD .cue .CUE .lst .LST .toc .TOC .sfc .SFC .smc .SMC .chd .CHD .ciso .CISO .cso .CSO .wbfs .WBFS .cdi .CDI .gc .GC .pbp .PBP .dump .DUMP .gcm .GCM .wad .WAD .gcz .GCZ .gdi .GDI .2hd .2HD .32x .32X .3ds .3DS .3dsx .3DSX .88d .88D .a26 .A26 .a52 .A52 .a78 .A78 .adf .ADF .adz .ADZ .app .APP .atr .ATR .atx .ATX .axf .AXF .bs .BS .cas .CAS .cbn .CBN .cci .CCI .cdm .CDM .cdt .CDT .cmd .CMD .col .COL .cpc .CPC .crt .CRT .ctr .CTR .cxi .CXI .d64 .D64 .d71 .D71 .d80 .D80 .d81 .D81 .d82 .D82 .d88 .D88 .dim .DIM .dms .DMS .do .DO .dol .DOL .dsk .DSK .dup .DUP .elf .ELF .exe .EXE .fba .FBA .fds .FDS .fig .FIG .g41 .G41 .g64 .G64 .gam .GAM .gb .GB .gba .GBA .gbc .GBC .gen .GEN .gg .GG .hdf .HDF .hdm .HDM .int .INT .ipf .IPF .itv .ITV .iwad .IWAD .j64 .J64 .jag .JAG .lha .LHA .lnx .LNX .lua .LUA .lutro .LUTRO .m3u .M3U .md .MD .mgd .MGD .mgt .MGT .mgw .MGW .moonlight .MOONLIGHT .mx1 .MX1 .mx2 .MX2 .n64 .N64 .nds .NDS .nes .NES .ngc .NGC .ngp .NGP .nib .NIB .p .P .p00 .P00 .pak .PAK .pce .PCE .po .PO .prg .PRG .prx .PRX .raw .RAW .residualvm .RESIDUALVM .rom .ROM .rzx .RZX .scl .SCL .scummvm .SCUMMVM .sg .SG .sgx .SGX .smd .SMD .sms .SMS .sna .SNA .st .ST .stx .STX .svm .SVM .swc .SWC .swf .SWF .szx .SZX .t64 .T64 .tap .TAP .trd .TRD .tzx .TZX .uae .UAE .udi .UDI .v64 .V64 .vb .VB .vec .VEC .ws .WS .wsc .WSC .x64 .X64 .xdf .XDF .xex .XEX .xfd .XFD .z .Z .z64 .Z64 .z80 .Z80 .znx .ZNX .nrg .NRG .mdf .MDF .iso .ISO .dat .DAT .bin .BIN .img .IMG .zip .ZIP .gz .GZ .7z .7Z'
    for i in $ROM_EXTENSION; do
        if [ -f "$ROM/${ROM_NAME%.*}$i" ]; then
            ROM="$ROM/${ROM_NAME%.*}$i"
            return 0
        fi
    done
    return 1
}

# Somente executa esta função se a rom estiver dentro de uma pasta.
if [ -d "$ROM" ]; then
    runInFolder
fi

################################################################################

### LOAD SCREEN STOP

if [ "$START_TIME" == "$(date +%s)" ]; then
    sleep 3
fi

while [ "$(pidof retroarch)" ]; do
    killall retroarch &
    sleep 0.2
done

################################################################################

### RAINE (EMULADOR DE NEOGEO CD)

if [ "$SYSTEM" == 'neogeocd' ]; then
    case $EMULATOR in raine2020|raine2015|auto)
        case $CORE in cdz|front-load|top-load|unibios|auto)
            exec /opt/Raine/Raine.sh                         \
                "$ROM"                                       \
                "$EMULATOR"                                  \
                "$CORE"                                      \
                 $(test -z "$P1INDEX" || echo -n "$P1INDEX") \
                 $(test -z "$P1GUID"  || echo -n "$P1GUID")  \
                 $(test -z "$P2INDEX" || echo -n "$P2INDEX") \
                 $(test -z "$P2GUID"  || echo -n "$P2GUID")
        esac
    esac
fi

################################################################################

### DREAMCAST (reicast)

# Este código resolve um bug com o Reicast introduzido no batocera oficial 5.24
# onde os controles não são reconhecidos.
# Caso o bug seja resolvido em futuras versões remova este código.

if [ "$SYSTEM" == 'dreamcast' ] && [ "$CORE" == 'reicast' ]; then
    mv "$HOME/configs/emulationstation/es_input.cfg" "$HOME/configs/emulationstation/es_input.cfg.old"
    ln -s '/usr/share/batocera/datainit/system/configs/emulationstation/es_input.cfg' "$HOME/configs/emulationstation/es_input.cfg"
    sleep 0.5 && mv -f "$HOME/configs/emulationstation/es_input.cfg.old" "$HOME/configs/emulationstation/es_input.cfg" &
fi

################################################################################

### ARCADE

if [ "$SYSTEM" == 'arcade' ]; then
    case $CORE in
        mame)        SYSTEM='mame'   ;;
        mame0200)    SYSTEM='mame'   ;;
        mame0139)    SYSTEM='mame'   ;;
        mame078plus) SYSTEM='mame'   ;;
        hbmame)      SYSTEM='hbmame' ;;
        fbneo)       SYSTEM='fbneo'  ;;
        fbalpha2012) SYSTEM='fbneo'  ;;
        flycast)     SYSTEM='naomi'  ;;
        flycast2019) SYSTEM='naomi'  ;;
        *)           SYSTEM='mame'   ;;
    esac
fi

################################################################################

### NINTENDO 64 DISK DRIVE & NINTENDO 64

if [ "$SYSTEM" == 'n64' ] || [ "$SYSTEM" == 'n64dd' ]; then

    CORE_CFG="$HOME/configs/retroarch/cores/retroarch-core-options.cfg"

    if ! [ -f "$CORE_CFG" ]; then
        mkdir -p "$(dirname "$CORE_CFG")"
        echo 'parallel-n64-64dd-hardware = "enabled"' >> "$CORE_CFG"
        echo 'parallel-n64-gfxplugin = "rice"'        >> "$CORE_CFG"
    elif ! [ "$(grep 'parallel-n64-64dd-hardware' "$CORE_CFG")" ]; then
        echo 'parallel-n64-64dd-hardware = "enabled"' >> "$CORE_CFG"
        echo 'parallel-n64-gfxplugin = "rice"'        >> "$CORE_CFG"
    fi

    if [ "$SYSTEM" == 'n64' ]; then
        sed -i 's#parallel-n64-64dd-hardware = \"enabled\"#parallel-n64-64dd-hardware = \"disabled\"#' "$CORE_CFG"
    else
        sed -i 's#parallel-n64-64dd-hardware = \"disabled\"#parallel-n64-64dd-hardware = \"enabled\"#' "$CORE_CFG"
    fi

    sleep 0.5

    unset CORE_CFG
fi

################################################################################

### NINTENDO 64

# Descompacta a rom no formato .zip para o emulador mupen64plus.
# Este emulador só executa roms descompactadas.

if [ "$SYSTEM" == 'n64' ]; then
    if [ "$EMULATOR" == 'mupen64plus' ] || [ "$EMULATOR" == 'auto' ]; then

        ROM_NAME_FULL="$(basename "$ROM")"

        ROM_NAME="${ROM_NAME_FULL%.zip}"
        ROM_NAME="${ROM_NAME%.ZIP}"

        if [ "${ROM_NAME_FULL}" == "${ROM_NAME}.zip" ] || [ "$ROM_NAME_FULL" == "${ROM_NAME}.ZIP" ]; then

            ROM_DESCOMPACTADA='FALSE'

            while : ; do
                for j in .z64 .Z64 .n64 .N64 .v64 .V64; do
                    if [ -f "${EXTRACTIONS_DIR}/${ROM_NAME}${j}" ]; then
                        ROM="${EXTRACTIONS_DIR}/${ROM_NAME}${j}"
                        ROM_DESCOMPACTADA='TRUE'
                        break
                    fi
                done

                if [ "${ROM_DESCOMPACTADA}" == 'FALSE' ]; then
                    rm -r -f "${EXTRACTIONS_DIR}/"* 2> /dev/null
                    unzip "${ROM}" -d "${EXTRACTIONS_DIR}"
                else
                    break
                fi
            done

        fi
    fi
fi

################################################################################

### GAMECUBE E WII (DOLPHIN-EMU)

if [ "$SYSTEM" == 'gamecube' ] || [ "$SYSTEM" == 'wii' ]; then
    # ATIVA POR PADRÃO A EMULAÇÃO DE CONTROLE DO WII (DEITADO)
    if [ "$EMULATOR" == 'libretro' ]; then
        if [ "$SYSTEM" == 'wii' ] && [ ! -d "$DOLPHIN_RMP_DIR" ]; then
            DOLPHIN_RMP_DIR="$SHARE/system/.config/retroarch/config/remaps/dolphin-emu"
            mkdir -p "$DOLPHIN_RMP_DIR"
            for ((i = 1; i <= 4; i++)); do
                echo -e "input_libretro_device_p${i} = \"513\"\n"\
                        "input_player${i}_btn_b = \"1\"\n"\
                        "input_player${i}_btn_x = \"0\"\n"\
                        "input_player${i}_btn_y = \"9\"" >> "$DOLPHIN_RMP_DIR/wii.rmp"
            done
        fi
    else
        mouse-pointer on

        DOLPHIN_CFG="$SHARE/system/configs/dolphin-emu/Dolphin.ini"
		dolphin="/usr/lib/python2.7/site-packages/configgen/generators/dolphin/dolphinGenerator.py"

        # Cria arquivo Dolphin.ini
        if ! [ -f "$DOLPHIN_CFG" ]; then
            mkdir -p "$(dirname "${DOLPHIN_CFG}")"
            echo '[Core]'                         > "$DOLPHIN_CFG"
            echo 'SkipIPL = False'               >> "$DOLPHIN_CFG"
            echo 'EnableSignatureChecks = False' >> "$DOLPHIN_CFG"
        fi

        # GAMECUBE - FULLBOOT E FASTBOOT
        if [ "$SYSTEM" == 'gamecube' ]; then
            if [ "$(grep '^gamecube.fullboot=0' "$BATOCERA_CONF")" ]; then
                sed -i 's/^SkipIPL.*/SkipIPL = True/'  "$DOLPHIN_CFG"
            else
                sed -i 's/^SkipIPL.*/SkipIPL = False/' "$DOLPHIN_CFG"
            fi
        else
            # WII - FIX ASSINATURA DIGITAL (Sempre desativado)
            sed -i 's/^EnableSignatureChecks.*/EnableSignatureChecks = False/' "$DOLPHIN_CFG"
        fi
		# USA CONTROLES REAIS DO GAMECUBE ATRAVEZ DO ADAPTADOR MYFLASH DO NINTENDO WII
		if [ "$(grep '^use.gamecube.pads=1' "$BATOCERA_CONF")" ] && [ "$(grep 'dolphinSettings.set("Core", "SIDevice0", "6")' "$dolphin" )" ]; then
		    sed -i 's/dolphinSettings.set("Core", "SIDevice0", "6")/dolphinSettings.set("Core", "SIDevice0", "12")/' "$dolphin"
	        sed -i 's/dolphinSettings.set("Core", "SIDevice1", "6")/dolphinSettings.set("Core", "SIDevice1", "12")/' "$dolphin"
	        sed -i 's/dolphinSettings.set("Core", "SIDevice2", "6")/dolphinSettings.set("Core", "SIDevice2", "12")/' "$dolphin"
	        sed -i 's/dolphinSettings.set("Core", "SIDevice3", "6")/dolphinSettings.set("Core", "SIDevice3", "12")/' "$dolphin"
		elif [ "$(grep '^#use.gamecube.pads=1' "$BATOCERA_CONF")" ] && [ "$(grep 'dolphinSettings.set("Core", "SIDevice0", "12")' "$dolphin" )" ]; then
		    sed -i 's/dolphinSettings.set("Core", "SIDevice0", "12")/dolphinSettings.set("Core", "SIDevice0", "6")/' "$dolphin"
	        sed -i 's/dolphinSettings.set("Core", "SIDevice1", "12")/dolphinSettings.set("Core", "SIDevice1", "6")/' "$dolphin"
	        sed -i 's/dolphinSettings.set("Core", "SIDevice2", "12")/dolphinSettings.set("Core", "SIDevice2", "6")/' "$dolphin"
	        sed -i 's/dolphinSettings.set("Core", "SIDevice3", "12")/dolphinSettings.set("Core", "SIDevice3", "6")/' "$dolphin"
		fi
    fi
fi

################################################################################

### 3DS

if [ "$SYSTEM" == '3ds' ]; then
    if [ "$EMULATOR" == 'citra' ] || [ "$EMULATOR" == 'auto' ]; then
        mouse-pointer on
    fi

    # Mii Data para o citra
    if ! [ -d "${SAVES_DIR}/3ds/citra-emu" ]; then
        mkdir -p "${SAVES_DIR}/3ds"
        cp -r "${BIOS_DIR}/citra" "${SAVES_DIR}/3ds/citra-emu"
    fi

    if ! [ -e "${SAVES_DIR}/3ds/Citra" ]; then
        ln -s "${SAVES_DIR}/3ds/citra-emu" "${SAVES_DIR}/3ds/Citra"
    fi
fi

################################################################################

### SONY PSP

if [ "$SYSTEM" == 'psp' ]; then
    # Suporte à DLCs.
    if [ -d "${ROMS_DIR}/psp/DLC" ] && [ ! -e "${SAVES_DIR}/psp/PSP/GAME" ]; then
        mkdir -p "${SAVES_DIR}/psp/PSP"
        ln -sf "${ROMS_DIR}/psp/DLC" "${SAVES_DIR}/psp/PSP/GAME"
    fi
fi

#################################################################################

### MSDOS

if [ "$SYSTEM" == 'dos' ]; then
    mouse-pointer on
fi

#################################################################################

### LINUX

if [ "$SYSTEM" == 'linux' ]; then
    # Carrega o jogo de uma pasta.
    if [ -d "$ROM" ]; then
        cd "$ROM"
        if ! [ -x ./batocera.plus ]; then
            chmod +x ./batocera.plus
        fi
        ./batocera.plus $@;
    elif [ -f "${ROM%plus}plus" ] || [ -f "${ROM%PLUS}PLUS" ]; then
        # Carrega o jogo compactado no formato squashfs.
        if mount "$ROM" $HOME/../extractions; then
            cd "$HOME/../extractions"
            ./batocera.plus $@;
            cd ..
            sleep 0.5
            umount -f "$HOME/../extractions"
        fi
    fi
    exit $?
fi

################################################################################

### WINDOWS

if [ "$SYSTEM" == 'windows' ]; then

    ### Captura o nome da rom sem extenção ###

    ROM_NAME="$(basename "$ROM")"

    if [ "$ROM_NAME" == "${ROM_NAME%plus}plus" ]; then
        ROM_NAME="${ROM_NAME%.plus}"
    elif [ "$ROM_NAME" == "${ROM_NAME%PLUS}PLUS" ]; then
        ROM_NAME="${ROM_NAME%.PLUS}"
    else
        exit 1
    fi

    ### Monta e acessa o diretório do jogo ###

    if [ -d "$ROM" ]; then
        cd "$ROM"
    elif [ -f "$ROM" ]; then
        MOUNT_DIR="$HOME/../extractions/$(basename "$ROM")"

        mkdir -p "$MOUNT_DIR"

        if mount "$ROM" "$MOUNT_DIR"; then
            cd "$MOUNT_DIR"
            ROM="$MOUNT_DIR"
        else
            exit $?
        fi
    else
        exit 1
    fi

    ### Configura o save ###

    WIN_SAVE_DIR="$(cat batocera.plus | grep '^WIN_SAVE_DIR=' | cut -d "'" -f 2)"

    if [ "$WIN_SAVE_DIR" ]; then

        ### Cria o diretório de save (batocera e wine) ###

        BATOCERA_SAVE="$HOME/../saves/windows/${ROM_NAME}"

        if ! [ -d "${BATOCERA_SAVE}" ]; then
            mkdir -p "${BATOCERA_SAVE}"
        fi

        WIN_SAVE_DIR="$HOME/configs/wine/drive_c/${WIN_SAVE_DIR:3}"

        if ! [ -e "${WIN_SAVE_DIR}" ]; then
            mkdir -p "${WIN_SAVE_DIR}/.."
            rm -r  "${WIN_SAVE_DIR}"
            ln -sf "${BATOCERA_SAVE}" "${WIN_SAVE_DIR}"
        fi
    fi

    ### Executa o jogo ###

    RES_START="$(batocera-resolution currentMode)"

    if [ "$ROM" == "$MOUNT_DIR" ]; then
        ./batocera.plus $@
        cd ..
        umount -f "$MOUNT_DIR"
        rmdir "$MOUNT_DIR"
    else
        if ! [ -x ./batocera.plus ]; then
            chmod +x ./batocera.plus
        fi
        ./batocera.plus $@
    fi

    RES_STOP="$(batocera-resolution currentResolution)"

    if [ "$RES_START" != "$RES_STOP" ]; then
        batocera-resolution setMode "$RES_START"
    fi

    exit 0
fi

################################################################################

### OPENBOR

if [ "$SYSTEM" == 'openbor' ]; then
    exec /opt/OpenBOR/OpenBOR.sh "$CORE" "$ROM"
fi

################################################################################

### INTERNET

if [ "$SYSTEM" == 'internet' ]; then
    mouse-pointer on
    exec /opt/Firefox/firefox.sh "$SYSTEM" "$ROM"
fi

################################################################################

### MAME

#if [ "$SYSTEM" == 'mame' ]; then
#    ln -sf '/usr/share/batocera/datainit/decorations/default/systems/mame2.png' '/usr/share/batocera/datainit/decorations/default/systems/mame.png'
#fi

################################################################################

### SNES - MESS

#if [ "$SYSTEM" == 'snes' ] && [ "$CORE" == 'mess' ]; then
#    ### Adiciona parametros extras para o mess.
#    ### Agrascimentos a "Sérgio De Carvalho Júnior" pelos parametros.#
#
#    ROM="snes -rompath /userdata/roms/mame -cart \\\"$ROM\\\""
#    SYSTEM='mame'
#    CORE='mame'
#
#    ### Força a ativação do boot_from_cli
#
#    CORE_CFG="$HOME/configs/retroarch/cores/retroarch-core-options.cfg"
#    if ! [ -f "$CORE_CFG" ]; then
#        mkdir -p "$(dirname "$CORE_CFG")"
#        echo 'mame_boot_from_cli = "enabled"' > "$CORE_CFG"
#    elif [ "$(grep 'mame_boot_from_cli' "$CORE_CFG" )" ]; then
#        sed -i 's/^mame_boot_from_cli.*/mame_boot_from_cli = "enabled"/' "$CORE_CFG"
#    else
#        echo 'mame_boot_from_cli = "enabled"' > "$CORE_CFG"
#    fi
#
#    # Saves
#    rm -r    "/userdata/saves/mame/mame/nvram/snes"
#    mkdir -p '/userdata/saves/snes'
#    ln -sf   '/userdata/saves/snes' '/userdata/saves/mame/mame/nvram/snes'
#
#    ### Decorações de Janela
#    ln -sf '/usr/share/batocera/datainit/decorations/default/systems/snes.png' '/usr/share/batocera/datainit/decorations/default/systems/mame.png'
#
#    sleep 0.2
#fi

################################################################################

### FLASH

if [ "$SYSTEM" == 'flash' ]; then
    mouse-pointer on
    exec /opt/Firefox/firefox.sh "$SYSTEM" "$ROM"
fi

################################################################################

### EXECUTA A ROM

EXEC_EMU="$(
    echo -n 'exec python /usr/lib/python2.7/site-packages/configgen/emulatorlauncher.py'

    test -z "$P1INDEX"      || echo -n ' -p1index '      "$P1INDEX"
    test -z "$P1GUID"       || echo -n ' -p1guid '       "$P1GUID"
    test -z "$P1NAME"       || echo -n ' -p1name '     "\"$P1NAME\""
    test -z "$P1NBAXES"     || echo -n ' -p1nbaxes '     "$P1NBAXES"
    test -z "$P1DEVICEPATH" || echo -n ' -p1devicepath ' "$P1DEVICEPATH"

    test -z "$P2INDEX"      || echo -n ' -p2index '      "$P2INDEX"
    test -z "$P2GUID"       || echo -n ' -p2guid '       "$P2GUID"
    test -z "$P2NAME"       || echo -n ' -p2name '     "\"$P2NAME\""
    test -z "$P2NBAXES"     || echo -n ' -p2nbaxes '     "$P2NBAXES"
    test -z "$P2DEVICEPATH" || echo -n ' -p2devicepath ' "$P2DEVICEPATH"

    test -z "$P3INDEX"      || echo -n ' -p3index '      "$P3INDEX"
    test -z "$P3GUID"       || echo -n ' -p3guid '       "$P3GUID"
    test -z "$P3NAME"       || echo -n ' -p3name '     "\"$P3NAME\""
    test -z "$P3NBAXES"     || echo -n ' -p3nbaxes '     "$P3NBAXES"
    test -z "$P3DEVICEPATH" || echo -n ' -p3devicepath ' "$P3DEVICEPATH"

    test -z "$P4INDEX"      || echo -n ' -p4index '      "$P4INDEX"
    test -z "$P4GUID"       || echo -n ' -p4guid '       "$P4GUID"
    test -z "$P4NAME"       || echo -n ' -p4name '     "\"$P4NAME\""
    test -z "$P4NBAXES"     || echo -n ' -p4nbaxes '     "$P4NBAXES"
    test -z "$P4DEVICEPATH" || echo -n ' -p4devicepath ' "$P4DEVICEPATH"

    test -z "$P5INDEX"      || echo -n ' -p5index '      "$P5INDEX"
    test -z "$P5GUID"       || echo -n ' -p5guid '       "$P5GUID"
    test -z "$P5NAME"       || echo -n ' -p5name '     "\"$P5NAME\""
    test -z "$P5NBAXES"     || echo -n ' -p5nbaxes '     "$P5NBAXES"
    test -z "$P5DEVICEPATH" || echo -n ' -p5devicepath ' "$P5DEVICEPATH"

    test -z "$SYSTEM"       || echo -n ' -system '       "$SYSTEM"
    test -z "$ROM"          || echo -n ' -rom '        "\"$ROM\""
)"

echo "$EXEC_EMU" > "$HOME/logs/es_launch_plus.log"
exec /bin/sh -c "$EXEC_EMU"

################################################################################
